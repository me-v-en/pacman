{"version":3,"sources":["script/canvas.js","script/data.json","script/utils.js","script/tile.js","script/board.js","script/ghost.js","script/pacman.js","script/game.js","script/index.js"],"names":["CANVAS_ELEMENT","document","getElementById","CTX","canvas","getContext","imageSmoothingEnabled","BG_IMAGE","COIN_IMAGE","ISAAC_SPRITE","BONEY_HEAD","BONEY_BODY","module","exports","animationDuration","stepAnimationDuration","framesStep","spriteSize","tileSize","boardWidth","boardHeight","canvasWidth","canvasHeight","ennemiesData","initialCoord","initialTarget","scatterTarget","spawnTimeout","boardArray","gameData","require","CANVAS_WIDTH","CANVAS_HEIGHT","DIRECTION_MATRICES","modulo","n","m","mod","Math","abs","moduloCoord","coord","getDirectionFromCoord","Object","entries","find","directionCoord","compareArrays","addCoord","coord1","coord2","map","value","index","substractCoord","distanceBetweenCoords","part1","pow","part2","sqrt","a","b","length","i","TILE_SIZE","Tile","initialData","tileType","hasPoint","drawImage","BOARD_ARRAY","BOARD_WIDTH","BOARD_HEIGHT","Board","boardTiles","initBoard","y","line","x","tile","push","coordX","coordY","width","height","drawTiles","forEach","row","drawTile","SPRITE_SIZE","ANIMATION_DURATION","STEP_DURATION","FRAMES_STEP","DIRECTIONS","Boney","init","ennemyData","currentCoord","movingCoord","targetCoord","scatterCoord","justSpawned","direction","userInputDirection","beginningGameTimestamp","animTimestamp","stepAnimationTimeStamp","stepAnimation","state","timestamp","Date","getTime","computeDirection","window","setTimeout","includes","getCoordToDraw","drawOnCanvas","isAnimationFinished","animationProgress","getProgressOfAnimation","deltaX","deltaY","incrementStepAnimation","drawBody","drawHead","save","spriteIndex","isReversed","translate","scale","restore","findIndex","Pacman","inputTimestamp","timeSinceLastInput","stepAnimationShift","ENNEMIES_DATA","Game","scoreElement","score","gameState","initGame","board","pacman","boneys","initEnnemies","draw","bindEventHandler","requestAnimationFrame","loop","bind","progress","lastRender","update","updatePacman","updateEnnemies","fillStyle","fillRect","drawBoard","drawEnnemies","addPointOfCurrentPacmanTile","nextTile","computePathPacman","setMovingCoord","isUserInputValid","nextTileUserDirection","getNextTileInDirection","confirmUserDirection","nextTileCurrentDirection","boney","updateEnnemy","ennemy","canMove","updateState","possibleTiles","getEnnemyPossibleTiles","getTarget","tileToMove","computeNearestTileToTarget","adjacentTiles","filter","dir","getOppositeDirection","isTilePossible","closestDistance","closestTile","distance","directionMatrice","coordToMove","getTile","currentTile","addScore","removePoint","textContent","addEventListener","keyupEventHandler","removeEventListener","event","preventDefault","keycode","which","setUserInputDirection","docReady","fn","readyState","game","startGameLoop"],"mappings":"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","file":"script.cb3aa424.js","sourceRoot":"..","sourcesContent":["export const CANVAS_ELEMENT = document.getElementById(\"canvas\");\nexport const CTX = canvas.getContext(\"2d\");\nCTX.imageSmoothingEnabled = false;\n\nexport const BG_IMAGE = document.getElementById(\"bgBoard\");\nexport const COIN_IMAGE = document.getElementById(\"coin\");\nexport const ISAAC_SPRITE = document.getElementById(\"isaacSprite\");\nexport const BONEY_HEAD = document.getElementById(\"boneyHead\");\nexport const BONEY_BODY = document.getElementById(\"boneyBody\");\n","module.exports={animationDuration:200,stepAnimationDuration:50,framesStep:10,spriteSize:32,tileSize:30,boardWidth:28,boardHeight:31,canvasWidth:840,canvasHeight:930,ennemiesData:[{initialCoord:[13,13],initialTarget:[13,11],scatterTarget:[1,26],spawnTimeout:5e3},{initialCoord:[14,13],initialTarget:[13,11],scatterTarget:[1,1],spawnTimeout:1e4}],boardArrayh\",\"h\",\"h\",\"h\",\"h\",\"h\",\"X\",\".\",\"X\",\"X\",\".\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"X\",\"h\",\"h\",\"h\",\"h\",\"h\",\"h\",\"X\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\".\",\"X\",\"X\",\".\",\"X\",\"h\",\"h\",\"h\",\"h\",\"h\",\"h};","let gameData = require(\"./data.json\");\nconst CANVAS_WIDTH = gameData.canvasWidth;\nconst CANVAS_HEIGHT = gameData.canvasHeight;\n\n\nexport const DIRECTION_MATRICES = {\n    'LEFT' : [-1, 0],\n    'RIGHT' : [1, 0],\n    'UP' : [0, -1],\n    'DOWN' : [0, 1]\n\n}\n\nexport function modulo(n, m) {\n    var mod = ((n % m) + m) % m;\n    return mod < 0 ? mod + Math.abs(m) : mod;\n};\n\nexport function moduloCoord(coord) {\n    return [modulo(coord[0], CANVAS_WIDTH), modulo(coord[1], CANVAS_HEIGHT)]\n};\n\nexport function getDirectionFromCoord(coord){\n    return Object.entries(DIRECTION_MATRICES).find(([direction, directionCoord])=>{\n        return compareArrays(coord, directionCoord);\n    })[0];\n    \n\n}\n\nexport function addCoord(coord1, coord2) {\n    return coord1.map((value, index) => value += coord2[index]);\n};\n\nexport function substractCoord(coord1, coord2) {\n    return coord1.map((value, index) => value -= coord2[index]);\n};\n\nexport function distanceBetweenCoords(coord1, coord2) {\n    let part1 = Math.pow(coord1[0] - coord2[0], 2);\n    let part2 = Math.pow(coord1[1] - coord2[1], 2);\n    return Math.sqrt(part1 + part2);\n};\n\nexport function compareArrays(a, b){\n  // if length is not equal\n  if(a?.length != b?.length)   return false;\n\n  // comapring each element of array\n   for(var i=0;i<a.length;i++){\n   if(a[i]!=b[i]) return false;\n   }\n    return true;\n  }","import { CTX, COIN_IMAGE } from \"./canvas\";\nimport {compareArrays} from \"./utils\";\n\nlet gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nexport default class Tile {\n  constructor(initialData, coord) {\n    //possible tileType : 'PATH', 'WALL', 'GATE', 'HOME'\n    this.tileType = \"\";\n    this.coord = coord;\n    this.hasPoint = false;\n\n    switch (initialData) {\n      case \"X\":\n        this.tileType = \"WALL\";\n        break;\n      case \".\":\n        this.tileType = \"PATH\";\n        this.hasPoint = true;\n        break;\n      case \"-\":\n        this.tileType = \"GATE\";\n        break;\n      case \"h\":\n        this.tileType = \"HOME\";\n        break;\n      default:\n        break;\n    }\n  }\n\n  removePoint() {\n    this.hasPoint = false;\n  }\n\n  drawTile() {\n    if (!this.hasPoint) {\n      return;\n    }\n\n    CTX.drawImage(\n      COIN_IMAGE,\n      this.coord[0] * TILE_SIZE,\n      this.coord[1] * TILE_SIZE,\n      TILE_SIZE,\n      TILE_SIZE\n    );\n    }\n  }\n\n","import Tile from \"./tile\";\nimport { CANVAS_ELEMENT, CTX, BG_IMAGE } from \"./canvas\";\nimport { modulo } from \"./utils\";\n\nlet gameData = require(\"./data.json\");\nconst BOARD_ARRAY = gameData.boardArray;\nconst BOARD_WIDTH = gameData.boardArray[0].length;\nconst BOARD_HEIGHT = gameData.boardArray.length;\nconst CANVAS_WIDTH = gameData.canvasWidth;\nconst CANVAS_HEIGHT = gameData.canvasHeight;\n\nexport default class Board {\n  constructor() {\n    this.boardTiles = [];\n    this.initBoard();\n  }\n\n  initBoard() {\n    this.boardTiles = [];\n    for (let y = 0; y < BOARD_HEIGHT; y++) {\n      let line = [];\n      for (let x = 0; x < BOARD_WIDTH; x++) {\n        let tile = new Tile(BOARD_ARRAY[y][x], [x, y]);\n        line.push(tile);\n      }\n      this.boardTiles.push(line);\n    }\n  }\n\n  getTile(coord) {\n    if (coord) {\n      let coordX = modulo(coord[0], BOARD_WIDTH);\n      let coordY = modulo(coord[1], BOARD_HEIGHT);\n      return this.boardTiles[coordY][coordX];\n    }\n  }\n\n  drawBoard() {\n    CTX.drawImage(BG_IMAGE, 0, 0, CANVAS_ELEMENT.width, CANVAS_ELEMENT.height);\n    this.drawTiles();\n  }\n\n  drawTiles() {\n    this.boardTiles.forEach((row) => {\n      row.forEach((tile) => {\n        tile.drawTile();\n      });\n    });\n  }\n}\n","import {\n  CTX,\n  BONEY_HEAD,\n  BONEY_BODY\n} from \"./canvas\";\n\nimport {\n  getDirectionFromCoord,\n  compareArrays,\n  substractCoord\n} from \"./utils\";\n\nconst gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nconst SPRITE_SIZE = gameData.spriteSize;\nconst ANIMATION_DURATION = gameData.animationDuration;\nconst STEP_DURATION = gameData.stepAnimationDuration;\nconst FRAMES_STEP = gameData.framesStep;\nconst DIRECTIONS = ['DOWN', 'RIGHT', 'UP', 'LEFT'];\n\n//STATE : SPAWN, SCATTER, CHASE\nexport default class Boney {\n  constructor(coord) {\n    this.init(coord);\n  }\n\n  init(ennemyData) {\n    this.ennemyData = ennemyData;\n    // Actual coord\n    this.currentCoord = ennemyData.initialCoord;\n\n    // Coord where the pacman is moving to\n    this.movingCoord = this.currentCoord;\n\n    // Position of the gate to move to\n    this.targetCoord = ennemyData.initialTarget;\n    this.scatterCoord = ennemyData.scatterTarget;\n    this.spawnTimeout = ennemyData.spawnTimeout;\n    this.justSpawned = true;\n\n    // Timestamp fo the start of the animation\n    this.direction = \"\";\n    this.userInputDirection = \"\";\n\n\n    this.beginningGameTimestamp = null;\n    this.animTimestamp = null;\n    this.stepAnimationTimeStamp = null;\n    this.stepAnimation = 0;\n\n    this.state = 'SPAWN';\n  }\n\n  canMove(timestamp) {\n    if (!this.beginningGameTimestamp) {\n      this.beginningGameTimestamp = timestamp;\n      return false;\n    }\n\n    return (timestamp - this.beginningGameTimestamp) > this.spawnTimeout;\n  }\n\n  setDirection(direction) {\n    this.direction = direction;\n  }\n\n  getOppositeDirection(){\n    switch (this.direction){\n      case 'UP':\n        return 'DOWN';\n        break;\n      case 'DOWN':\n        return 'UP';\n        break;\n      case 'LEFT':\n        return 'RIGHT';\n        break;\n      case 'RIGHT':\n        return 'LEFT';\n        break;\n      default:\n        return null;\n    }\n\n  }\n\n  setMovingCoord(coord) {\n    this.movingCoord = coord;\n    this.animTimestamp = new Date().getTime();\n    this.direction = this.computeDirection();\n    window.setTimeout(() => {\n      this.currentCoord = coord;\n    }, ANIMATION_DURATION);\n  }\n\n  updateState() {\n    switch (this.state) {\n      case 'SPAWN':\n        if (compareArrays(this.currentCoord, this.targetCoord)) {\n          this.targetCoord = this.scatterCoord;\n          this.state = 'SCATTER'\n        };\n        break;\n      case 'SCATTER':\n        if (compareArrays(this.currentCoord, this.scatterCoord)) {\n          this.state = 'CHASE'\n        };\n        break;\n      case 'CHASE':\n        break;\n    }\n  }\n\n  computeDirection() {\n    const directionCoord = substractCoord(this.movingCoord, this.currentCoord);\n    return getDirectionFromCoord(directionCoord);\n  }\n\n  isAnimationFinished() {\n    return this.currentCoord === this.movingCoord;\n  }\n\n  isTargetReached() {\n    return this.currentCoord === this.currentCoord;\n  }\n\n  isTilePossible(tile) {\n    if (this.justSpawned) {\n      return ['PATH', 'GATE', 'HOME'].includes(tile.tileType);\n    }\n    return tile ?.tileType === \"PATH\";\n  }\n\n  updateAnimation() {\n    return null;\n  }\n\n  draw(timestamp) {\n    if(!this.stepAnimationTimeStamp){\n      this.stepAnimationTimeStamp = timestamp;\n    }\n    let x, y;\n    [x, y] = this.getCoordToDraw();\n    this.drawOnCanvas(x, y, timestamp);\n  }\n\n  getCoordToDraw() {\n    let x, y;\n    if (this.isAnimationFinished()) {\n      return this.currentCoord;\n    }\n    // Get the percentage of progress of the anim\n    let animationProgress = this.getProgressOfAnimation();\n\n    //Delta of the current tile and target tiles\n    let deltaX = this.movingCoord[0] - this.currentCoord[0];\n    let deltaY = this.movingCoord[1] - this.currentCoord[1];\n\n    // Position based on the progress of the animation\n    x = this.currentCoord[0] + deltaX * animationProgress;\n    y = this.currentCoord[1] + deltaY * animationProgress;\n\n    // Setting the position of the pacman\n    return [x, y];\n  }\n\n  drawOnCanvas(x, y, timestamp) {\n    let currentStepDuration = timestamp - this.stepAnimationTimeStamp;\n    if(currentStepDuration > STEP_DURATION){\n      this.incrementStepAnimation(timestamp);\n    }\n    this.drawBody(x, y);\n    this.drawHead(x, y);\n  }\n\n  drawBody(x, y){\n    CTX.save();\n\n    x = x * TILE_SIZE;\n    y = y * TILE_SIZE;\n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation;\n    let isReversed = false;\n\n    if(this.direction === 'LEFT' || this.direction === 'RIGHT'){\n      spriteIndex = 2;\n    }\n\n    if (this.direction === 'LEFT') {\n      isReversed = true;\n    }\n\n    if(stepAnimation > 7){\n      spriteIndex++;\n      stepAnimation = stepAnimation % 8;\n    }\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      BONEY_BODY,\n      stepAnimation * SPRITE_SIZE,\n      spriteIndex * SPRITE_SIZE,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE,\n      TILE_SIZE,\n    );\n\n    CTX.restore();\n\n  }\n\n  drawHead(x, y) {\n    CTX.save();\n\n    x = x * TILE_SIZE;\n    y = (y - 0.3) * TILE_SIZE;\n\n      let spriteIndex = DIRECTIONS.findIndex((direction) => direction === this.direction);\n    if (spriteIndex === -1) spriteIndex = 0;\n    let isReversed = false;\n    if (this.direction === 'LEFT') {\n      isReversed = true;\n      spriteIndex = 1;\n    }\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      BONEY_HEAD,\n      spriteIndex * SPRITE_SIZE,\n      0,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE,\n      TILE_SIZE,\n    );\n\n    CTX.restore();\n  }\n\n  incrementStepAnimation(timestamp){\n    this.stepAnimation++;\n    this.stepAnimation = this.stepAnimation % FRAMES_STEP;\n    this.stepAnimationTimeStamp = timestamp;\n  }\n\n  getProgressOfAnimation() {\n    let currentTimeStamp = new Date().getTime();\n    return (currentTimeStamp - this.animTimestamp) / ANIMATION_DURATION;\n  }\n}","import { CTX, ISAAC_SPRITE } from \"./canvas\";\n\nconst gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nconst SPRITE_SIZE = gameData.spriteSize;\nconst ANIMATION_DURATION = gameData.animationDuration;\nconst STEP_DURATION = gameData.stepAnimationDuration;\nconst FRAMES_STEP = gameData.framesStep;\nexport default class Pacman {\n  constructor(coord) {\n    this.init(coord);\n  }\n\n  init(coord = [1, 14]) {\n    // Actual coord of the pacman\n  this.currentCoord = coord;\n\n    // Coord where the pacman is moving to\n  this.movingCoord = coord;\n\n    // Possible state : IDLE, MOVING, DEAD\n    this.state = \"IDLE\";\n\n    // Timestamp fo the start of the animation\n    this.animTimestamp = null;\n    this.direction = \"\";\n    this.stepAnimationTimeStamp = null;\n    this.stepAnimation = 0;\n    this.userInputDirection = \"\";\n    this.inputTimestamp = null;\n  }\n\n  setUserInputDirection(direction) {\n    this.userInputDirection = direction;\n    this.inputTimestamp = new Date().getTime();\n  }\n\n  isUserInputValid(){\n    let timeSinceLastInput = new Date().getTime() - this.inputTimestamp;\n    if(timeSinceLastInput > 2000) return null;\n    return this.userInputDirection;\n  }\n\n  confirmUserDirection() {\n    this.direction = this.userInputDirection;\n    // this.changePacmanSprite();\n  }\n\n  setDirection(direction) {\n    this.direction = direction;\n  }\n\n  setMovingCoord(coord) {\n    this.state = \"MOVING\";\n    this.movingCoord = coord;\n    this.animTimestamp = new Date().getTime();\n    window.setTimeout(() => {\n      this.currentCoord = coord;\n    }, ANIMATION_DURATION);\n  }\n\n  isAnimationFinished() {\n    return this.currentCoord === this.movingCoord;\n  }\n\n  updateAnimation() {\n    return null;\n  }\n\n  draw(timestamp) {\n    if(!this.stepAnimationTimeStamp){\n      this.stepAnimationTimeStamp = timestamp;\n    }\n    let x, y;\n    [x, y] = this.getCoordToDraw();\n    this.drawOnCanvas(x, y, timestamp);\n  }\n\n  getCoordToDraw(){\n    let x,y;\n    if (this.state === \"MOVING\") {\n      // Get the percentage of progress of the anim\n      let animationProgress = this.getProgressOfAnimation();\n      //Delta of the current tile and target tiles\n      let deltaX = this.movingCoord[0] - this.currentCoord[0];\n      let deltaY = this.movingCoord[1] - this.currentCoord[1];\n\n      // Position based on the progress of the animation\n      x = this.currentCoord[0] + deltaX * animationProgress;\n      y = this.currentCoord[1] + deltaY * animationProgress;\n\n      // Setting the position of the pacman\n    }\n    if (this.state === \"IDLE\") {\n      // If idle, set the pacman at the position of the tile\n      x = this.currentCoord[0];\n      y = this.currentCoord[1];\n    }\n    return[x,y];\n  }\n\n  drawOnCanvas(x, y, timestamp) {\n    let currentStepDuration = timestamp - this.stepAnimationTimeStamp;\n    if(currentStepDuration > STEP_DURATION){\n      this.incrementStepAnimation(timestamp);\n    }\n\n    this.drawBody(x, y);\n    this.drawHead(x, y);\n  }\n\n\n  drawBody(x, y){\n    CTX.save();\n\n    x = x * TILE_SIZE;\n    y = (y - 0.05) * TILE_SIZE;\n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation;\n    let stepAnimationShift = 7;\n    let stepAnimationModulo = 8;\n    let isReversed = false;\n\n    if(this.direction === 'LEFT' || this.direction === 'RIGHT'){\n      spriteIndex = 2;\n      stepAnimationShift = 0;\n\n    }\n\n    if (this.direction === 'LEFT') {\n      isReversed = true;\n    }\n\n    stepAnimation += stepAnimationShift;\n\n    if(stepAnimation >= stepAnimationModulo){\n      spriteIndex++;\n      stepAnimation = stepAnimation % stepAnimationModulo;\n    }\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      ISAAC_SPRITE,\n      stepAnimation * SPRITE_SIZE,\n      spriteIndex * SPRITE_SIZE,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE,\n      TILE_SIZE,\n    );\n\n    CTX.restore();\n\n  }\n\n  drawHead(x, y) {\n    CTX.save();\n\n    x = x * TILE_SIZE;\n    y = (y - 0.4) * TILE_SIZE;\n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation >= 8 ? 1 : 0;\n    let isReversed = false;\n    let stepAnimationShift = 0;\n\n    if (this.direction === 'UP') {\n      stepAnimationShift = 4;\n    }\n    if (this.direction === 'RIGHT') {\n      stepAnimationShift = 2;\n    }\n    if (this.direction === 'LEFT') {\n      stepAnimationShift = 2;\n      isReversed = true;\n    }\n\n\n\n    stepAnimation += stepAnimationShift;\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      ISAAC_SPRITE,\n      stepAnimation * SPRITE_SIZE,\n      0,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE,\n      TILE_SIZE,\n    );\n\n    CTX.restore();\n  }\n\n  incrementStepAnimation(timestamp){\n    this.stepAnimation++;\n    this.stepAnimation = this.stepAnimation % FRAMES_STEP;\n    this.stepAnimationTimeStamp = timestamp;\n  }\n\n  getProgressOfAnimation() {\n    let currentTimeStamp = new Date().getTime();\n    return (currentTimeStamp - this.animTimestamp) / ANIMATION_DURATION;\n  }\n}\n","import Board from \"./board\";\nimport {\n  CANVAS_ELEMENT,\n  CTX\n} from \"./canvas\";\nimport Boney from \"./ghost\";\nimport Pacman from \"./pacman\";\nimport Tile from \"./tile\";\n\nconst gameData = require(\"./data.json\");\nconst ENNEMIES_DATA = gameData.ennemiesData;\nconst DIRECTIONS = ['DOWN', 'UP', 'RIGHT', 'LEFT'];\n\nimport {\n  modulo,\n  DIRECTION_MATRICES,\n  addCoord,\n  distanceBetweenCoords\n} from \"./utils\";\n\nexport default class Game {\n  constructor() {\n    this.scoreElement = document.getElementById(\"score\");\n\n    this.score = 0;\n    // Possible state : STOPPED, START, GAME, CHASE\n    this.gameState = \"START\";\n\n    this.initGame();\n  }\n\n  initGame() {\n    this.board = new Board();\n    this.pacman = new Pacman();\n    this.boneys = this.initEnnemies();\n\n    this.draw();\n  }\n\n  startGameLoop() {\n    this.bindEventHandler();\n    window.requestAnimationFrame(this.loop.bind(this));\n  }\n\n  loop(timestamp) {\n    let progress = timestamp - this.lastRender;\n    this.lastRender = timestamp;\n\n    this.draw(progress, timestamp);\n    this.update(progress, timestamp);\n\n    window.requestAnimationFrame(this.loop.bind(this));\n  }\n\n  update(progress, timestamp) {\n    // Update the state of the world for the elapsed time since last render\n    this.updatePacman();\n    this.updateEnnemies(timestamp);\n  }\n  resou\n  draw(progress, timestamp) {\n    // Reinit the canvas\n    CTX.fillStyle = \"#2c2a2a\";\n    CTX.fillRect(0, 0, CANVAS_ELEMENT.width, CANVAS_ELEMENT.height);\n    // Update the state of the world for the elapsed time since last render\n    this.board.drawBoard();\n    this.pacman.draw(timestamp);\n    this.drawEnnemies(timestamp);\n  }\n\n  ////////////////////////////////////\n  // PACMAN\n  ////////////////////////////////////\n\n  updatePacman() {\n    // If animation still happening, leave\n    if (!this.pacman.isAnimationFinished()) {\n      return;\n    }\n\n    // ADD SCORE\n    this.addPointOfCurrentPacmanTile();\n    // If animation is still happening\n\n    let nextTile = this.computePathPacman();\n    if (nextTile) {\n      this.pacman.setMovingCoord(nextTile.coord);\n    } else {\n      // If no valid target tile, stop pacman\n      this.pacman.direction = \"\";\n      this.pacman.state = \"IDLE\";\n    }\n  }\n\n  computePathPacman() {\n    // If no direction given, leave\n    if (!this.pacman.direction && !this.pacman.isUserInputValid()) {\n      return;\n    }\n\n    // Get the next tile in the user given direction\n    let nextTileUserDirection = this.getNextTileInDirection(\n      this.pacman.currentCoord,\n      this.pacman.userInputDirection\n    );\n\n    // If the user direction is valid\n    if (nextTileUserDirection ?.tileType === \"PATH\") {\n      this.pacman.confirmUserDirection();\n      return nextTileUserDirection;\n    }\n\n    // Get the next tile in the initial direction\n    let nextTileCurrentDirection = this.getNextTileInDirection(\n      this.pacman.currentCoord,\n      this.pacman.direction\n    );\n\n    // If the initial direction is valid\n    if (nextTileCurrentDirection ?.tileType === \"PATH\") {\n      this.pacman.setMovingCoord(nextTileCurrentDirection.coord);\n      return nextTileCurrentDirection;\n    }\n  }\n\n  ////////////////////////////////////\n  // GHOSTS\n  ////////////////////////////////////\n  initEnnemies() {\n    const boneys = [];\n    ENNEMIES_DATA.forEach((ennemyData) => {\n      boneys.push(new Boney(ennemyData));\n    });\n    return boneys;\n  }\n\n  updateEnnemies(timestamp) {\n    this.boneys.forEach((boney) => {\n      this.updateEnnemy(boney, timestamp);\n    });\n  }\n\n  updateEnnemy(ennemy,timestamp) {\n    if (!ennemy.isAnimationFinished()) return;\n    if (!ennemy.canMove(timestamp)) return;\n\n    ennemy.updateState();\n\n    // get all possible tiles for the ennemy\n    const possibleTiles = this.getEnnemyPossibleTiles(ennemy);\n    if (possibleTiles.length > 1 && ennemy.state === 'CHASE') {\n      this.getTarget(ennemy);\n    }\n    // Compute what is the closest possible tile to the target coord\n    const tileToMove = this.computeNearestTileToTarget(ennemy, possibleTiles);\n    if (!tileToMove) return;\n\n    // Set the target coord\n    ennemy.setMovingCoord(tileToMove.coord);\n  }\n\n  getEnnemyPossibleTiles(ennemy) {\n    let currentCoord = ennemy.currentCoord;\n    // Ennemies can't go backwards\n    let possibleDirections = DIRECTIONS.filter((dir) => dir != ennemy.getOppositeDirection());\n    let adjacentTiles = possibleDirections.map((direction) => {\n      return this.getNextTileInDirection(currentCoord, direction);\n    });\n\n    return adjacentTiles.filter((tile) => {\n      return ennemy.isTilePossible(tile);\n    })\n  }\n\n  computeNearestTileToTarget(ennemy, possibleTiles) {\n    let targetCoord = ennemy.targetCoord;\n    let closestDistance = null;\n    let closestTile = null;\n\n    possibleTiles.forEach((tile) => {\n      let distance = distanceBetweenCoords(tile.coord, ennemy.targetCoord);\n      if (closestDistance === null || distance < closestDistance) {\n        closestDistance = distance;\n        closestTile = tile;\n      }\n    });\n    return closestTile;\n  }\n\n  getTarget(ennemy) {\n    if (!ennemy.state === 'CHASE') return;\n    ennemy.justSpawned = false;\n    ennemy.targetCoord = this.pacman.movingCoord;\n  }\n\n\n\n  drawEnnemies(timestamp) {\n    this.boneys.forEach((boney) => {\n      boney.draw(timestamp);\n    });\n  }\n\n\n  getNextTileInDirection(currentCoord, direction) {\n    if (!direction || !currentCoord) {\n      return false;\n    }\n\n    let directionMatrice = DIRECTION_MATRICES[direction];\n    let coordToMove = addCoord(directionMatrice, currentCoord);\n    return this.board.getTile(coordToMove);\n  }\n\n  addPointOfCurrentPacmanTile() {\n    let currentTile = this.board.getTile(this.pacman.currentCoord);\n\n    if (currentTile.hasPoint) {\n      this.addScore(10);\n      currentTile.removePoint();\n    }\n  }\n\n  addScore(value) {\n    this.score += value;\n    this.scoreElement.textContent = this.score;\n  }\n\n  bindEventHandler() {\n    document.addEventListener(\"keydown\", this.keyupEventHandler.bind(this));\n  }\n\n  unbindEventHandler() {\n    document.removeEventListener(\"keydown\", this.keyupEventHandler);\n  }\n\n  keyupEventHandler(event) {\n    event.preventDefault();\n    let keycode = event.which;\n\n    // LEFT : ARROW_LEFT or Q\n    if (keycode === 37 || keycode === 81) {\n      this.pacman.setUserInputDirection(\"LEFT\");\n    }\n    // RIGHT : ARROW_RIGHT or D\n    if (keycode === 39 || keycode === 68) {\n      this.pacman.setUserInputDirection(\"RIGHT\");\n    }\n    // UP : ARROW_UP or Z\n    if (keycode === 38 || keycode === 90) {\n      this.pacman.setUserInputDirection(\"UP\");\n    }\n    // DOWN : ARROW_DOWN or S\n    if (keycode === 40 || keycode === 83) {\n      this.pacman.setUserInputDirection(\"DOWN\");\n    }\n  }\n}","import Game from \"./game\";\n\nfunction docReady(fn) {\n    // see if DOM is already available\n    if (document.readyState === \"complete\" || document.readyState === \"interactive\") {\n        // call on next available tick\n        setTimeout(fn, 1);\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", fn);\n    }\n}    \n\n\ndocReady(()=>{\n    const game = new Game();\n    game.initGame();\n    game.startGameLoop();\n})\n\n"]}