{"version":3,"sources":["script/canvas.js","script/data.json","script/utils.js","script/tile.js","script/state.js","script/board.js","script/ennemyBehaviour.js","script/ennemyAnimation.js","script/ennemy.js","script/pacmanBehaviour.js","script/pacmanAnimation.js","script/pacman.js","script/game.js","script/index.js"],"names":["CANVAS_ELEMENT","document","getElementById","SCORE_ELEMENT","CTX","canvas","getContext","imageSmoothingEnabled","BG_IMAGE","COIN_IMAGE","PILL_IMAGE","ISAAC_SPRITE","ISAAC_POWERUP","ENNEMY_HEAD","ENNEMY_BODY","module","exports","animationDuration","normalPacmanSpeed","normalEnnemySpeed","fleeEnnemySpeed","stepAnimationDuration","framesStep","spriteSize","tileSize","boardWidth","boardHeight","canvasWidth","canvasHeight","powerUpDuration","ennemiesData","initialCoord","initialTarget","scatterTarget","spawnTimeout","boardArray","gameData","require","CANVAS_WIDTH","CANVAS_HEIGHT","DIRECTION_MATRICES","modulo","n","m","mod","Math","abs","moduloCoord","coord","getDirectionFromCoord","directionObject","Object","entries","find","directionCoord","compareArrays","addCoord","coord1","coord2","map","value","index","substractCoord","distanceBetweenCoords","part1","pow","part2","sqrt","a","b","length","i","TILE_SIZE","Tile","initialData","tileType","hasPoint","hasSuperPoint","drawImage","incrementConst","State","initState","score","gameState","board","pacman","ennemies","STATE","BOARD_ARRAY","BOARD_WIDTH","BOARD_HEIGHT","Board","boardTiles","initBoard","y","line","x","tile","push","coordX","coordY","width","height","drawTiles","forEach","row","drawTile","currentCoord","direction","directionMatrice","coordToMove","getTile","ANIMATION_DURATION","NORMAL_SPEED","FLEE_SPEED","DIRECTIONS","EnnemyBehaviour","ennemy","init","timestamp","updateState","setSpeed","state","computePath","targetCoord","scatterCoord","speed","possibleTiles","tileToMove","getPossibleTiles","getTarget","computeFarthestTileToTarget","computeNearestTileToTarget","setMovingCoord","adjacentTiles","filter","dir","getOppositeDirection","getNextTileInDirection","isTilePossible","justSpawned","includes","closestDistance","closestTile","distance","longestDistance","farthestTile","movingCoord","animTimestamp","Date","getTime","computeDirection","window","setTimeout","initialState","initInitialProperties","console","log","SPRITE_SIZE","STEP_DURATION","FRAMES_STEP","EnnemyAnimation","stepAnimationTimeStamp","stepAnimation","characterIsOutOfScreen","getCoordToDraw","drawOnCanvas","isAnimationFinished","animationProgress","getProgressOfAnimation","deltaX","deltaY","incrementStepAnimation","drawBody","drawHead","save","spriteIndex","isReversed","translate","scale","restore","findIndex","Ennemy","ennemyData","initPermanentProperties","ennemyBehaviour","ennemyAnimation","beginningGameTimestamp","userInputDirection","setFleeMode","cancelFleeMode","canMove","update","draw","POWERUP_DURATION","PacmanBehaviour","processTile","nextTile","computePathPacman","currentTile","startPowerUp","addScore","removePoint","setScore","clearTimeout","powerupTimeout","resetPowerUp","bind","isUserInputValid","nextTileUserDirection","confirmUserDirection","nextTileCurrentDirection","timeSinceLastInput","inputTimestamp","PacmanAnimation","isFrameAfterDeath","resetAnimation","drawDeath","drawHeadPowerup","decalageSource","frameCoord","decalageDestination","stepAnimationShift","Pacman","pacmanBehaviour","pacmanAnimation","textContent","ENNEMIES_DATA","Game","initGame","initEnnemies","bindEventHandler","requestAnimationFrame","loop","progress","lastRender","updateGameState","updateEnnemies","killTouchedEnnemies","isPacmanDead","setDead","isKilled","pacmanIsDead","ennemyLoop","isPacmanKilled","fillStyle","fillRect","drawBoard","drawEnnemies","addEventListener","keydownEventHandler","removeEventListener","event","keycode","which","setUserInputDirection","preventDefault","docReady","fn","readyState","game","startGameLoop"],"mappings":"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","file":"script.0569c717.js","sourceRoot":"..","sourcesContent":["export const CANVAS_ELEMENT = document.getElementById(\"canvas\");\nexport const SCORE_ELEMENT = document.getElementById(\"score\");\nexport const CTX = canvas.getContext(\"2d\");\nCTX.imageSmoothingEnabled = false;\n\nexport const BG_IMAGE = document.getElementById(\"bgBoard\");\nexport const COIN_IMAGE = document.getElementById(\"coin\");\nexport const PILL_IMAGE = document.getElementById(\"pill\");\nexport const ISAAC_SPRITE = document.getElementById(\"isaacSprite\");\nexport const ISAAC_POWERUP = document.getElementById(\"isaacPowerup\");\nexport const ENNEMY_HEAD = document.getElementById(\"ennemyHead\");\nexport const ENNEMY_BODY = document.getElementById(\"ennemyBody\");\n","module.exports={animationDuration:200,normalPacmanSpeed:1,normalEnnemySpeed:.9,fleeEnnemySpeed:.5,stepAnimationDuration:80,framesStep:10,spriteSize:32,tileSize:32,boardWidth:28,boardHeight:31,canvasWidth:840,canvasHeight:930,powerUpDuration:1e4,ennemiesData:[{initialCoord:[12,13],initialTarget:[13,11],scatterTarget:[1,26],spawnTimeout:2e3},{initialCoord:[13,13],initialTarget:[13,11],scatterTarget:[1,1],spawnTimeout:4e3},{initialCoord:[14,13],initialTarget:[13,11],scatterTarget:[26,1],spawnTimeout:6e3},{initialCoord:[15,13],initialTarget:[14,11],scatterTarget:[26,29],spawnTimeout:8e3}],boardArrayh\",\"h\",\"h\",\"h\",\"h\",\"h\",\"X\",\".\",\"X\",\"X\",\".\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"X\",\"h\",\"h\",\"h\",\"h\",\"h\",\"h\",\"X\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\".\",\"X\",\"X\",\".\",\"X\",\"h\",\"h\",\"h\",\"h\",\"h\",\"h};","let gameData = require(\"./data.json\");\nconst CANVAS_WIDTH = gameData.canvasWidth;\nconst CANVAS_HEIGHT = gameData.canvasHeight;\n\n\nexport const DIRECTION_MATRICES = {\n    'LEFT' : [-1, 0],\n    'RIGHT' : [1, 0],\n    'UP' : [0, -1],\n    'DOWN' : [0, 1]\n\n}\n\nexport function modulo(n, m) {\n    var mod = ((n % m) + m) % m;\n    return mod < 0 ? mod + Math.abs(m) : mod;\n};\n\nexport function moduloCoord(coord) {\n    return [modulo(coord[0], CANVAS_WIDTH), modulo(coord[1], CANVAS_HEIGHT)]\n};\n\nexport function getDirectionFromCoord(coord){\n    const directionObject = Object.entries(DIRECTION_MATRICES).find(([direction, directionCoord])=>{\n        return compareArrays(coord, directionCoord);\n    });\n    if (directionObject) {\n    return directionObject[0];\n    }    \n}\n    \n\nexport function addCoord(coord1, coord2) {\n    return coord1.map((value, index) => value += coord2[index]);\n};\n\nexport function substractCoord(coord1, coord2) {\n    return coord1.map((value, index) => value -= coord2[index]);\n};\n\nexport function distanceBetweenCoords(coord1, coord2) {\n    let part1 = Math.pow(coord1[0] - coord2[0], 2);\n    let part2 = Math.pow(coord1[1] - coord2[1], 2);\n    return Math.sqrt(part1 + part2);\n};\n\nexport function compareArrays(a, b){\n  // if length is not equal\n  if(a?.length != b?.length)   return false;\n\n  // comapring each element of array\n   for(var i=0;i<a.length;i++){\n   if(a[i]!=b[i]) return false;\n   }\n    return true;\n  }","import { CTX, COIN_IMAGE, PILL_IMAGE } from \"./canvas\";\nimport {compareArrays} from \"./utils\";\n\nlet gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nexport default class Tile {\n  constructor(initialData, coord) {\n    //possible tileType : 'PATH', 'WALL', 'GATE', 'HOME'\n    this.tileType = \"\";\n    this.coord = coord;\n    this.hasPoint = false;\n    this.hasSuperPoint = false;\n\n    switch (initialData) {\n      case \"X\":\n        this.tileType = \"WALL\";\n        break;\n      case \".\":\n        this.tileType = \"PATH\";\n        this.hasPoint = true;\n        break;\n      case \"O\":\n        this.tileType = \"PATH\";\n        this.hasSuperPoint = true;\n        break;\n      case \"-\":\n        this.tileType = \"GATE\";\n        break;\n      case \"h\":\n        this.tileType = \"HOME\";\n        break;\n      default:\n        break;\n    }\n  }\n\n  removePoint() {\n    this.hasPoint = false;\n    this.hasSuperPoint = false;\n  }\n\n  drawTile() {\n    if (this.hasPoint) {\n    CTX.drawImage(\n      COIN_IMAGE,\n      this.coord[0] * TILE_SIZE,\n      this.coord[1] * TILE_SIZE,\n      TILE_SIZE,\n      TILE_SIZE\n    );\n    }\n\n    if (this.hasSuperPoint) {\n      const incrementConst = 16;\n\n      CTX.drawImage(\n        PILL_IMAGE,\n        this.coord[0] * TILE_SIZE - incrementConst/2,\n        this.coord[1] * TILE_SIZE - incrementConst/2,\n        TILE_SIZE + incrementConst,\n        TILE_SIZE + incrementConst\n      );\n      }\n    }\n  }\n\n","class State {\n  constructor() {\n    this.initState();\n  }\n\n  initState() {\n    this.score = 0;\n    this.gameState = 'START';\n    this.board;\n    this.pacman;\n    this.ennemies;\n  }\n}\n\nconst STATE = new State();\nexport default {STATE};\n","import Tile from \"./tile\";\nimport { CANVAS_ELEMENT, CTX, BG_IMAGE } from \"./canvas\";\nimport { modulo, addCoord,  DIRECTION_MATRICES } from \"./utils\";\n\nimport STATE from \"./state\";\n\nlet gameData = require(\"./data.json\");\nconst BOARD_ARRAY = gameData.boardArray;\nconst BOARD_WIDTH = gameData.boardArray[0].length;\nconst BOARD_HEIGHT = gameData.boardArray.length;\nconst CANVAS_WIDTH = gameData.canvasWidth;\nconst CANVAS_HEIGHT = gameData.canvasHeight;\n\nexport default class Board {\n  constructor() {\n    this.boardTiles = [];\n    this.initBoard();\n  }\n\n  initBoard() {\n    this.boardTiles = [];\n    for (let y = 0; y < BOARD_HEIGHT; y++) {\n      let line = [];\n      for (let x = 0; x < BOARD_WIDTH; x++) {\n        let tile = new Tile(BOARD_ARRAY[y][x], [x, y]);\n        line.push(tile);\n      }\n      this.boardTiles.push(line);\n    }\n  }\n\n  getTile(coord) {\n    if (coord) {\n      let coordX = modulo(coord[0], BOARD_WIDTH);\n      let coordY = modulo(coord[1], BOARD_HEIGHT);\n      return this.boardTiles[coordY][coordX];\n    }\n  }\n\n  drawBoard() {\n    CTX.drawImage(BG_IMAGE, 0, 0, CANVAS_ELEMENT.width, CANVAS_ELEMENT.height);\n    this.drawTiles();\n  }\n\n  drawTiles() {\n    this.boardTiles.forEach((row) => {\n      row.forEach((tile) => {\n        tile.drawTile();\n      });\n    });\n  }\n\n  getNextTileInDirection(currentCoord, direction) {\n    if (!direction || !currentCoord) {\n      return false;\n    }\n\n    let directionMatrice = DIRECTION_MATRICES[direction];\n    let coordToMove = addCoord(directionMatrice, currentCoord);\n    return STATE.board.getTile(coordToMove);\n  }\n}\n","const gameData = require(\"./data.json\");\nconst ANIMATION_DURATION = gameData.animationDuration;\nconst NORMAL_SPEED = gameData.normalEnnemySpeed;\nconst FLEE_SPEED = gameData.fleeEnnemySpeed;\n\n\nimport STATE from \"./state\";\n\nimport {\n  getDirectionFromCoord,\n  compareArrays,\n  substractCoord,\n  distanceBetweenCoords\n} from \"./utils\";\n\n\nconst DIRECTIONS = ['DOWN', 'UP', 'RIGHT', 'LEFT'];\n\nexport default class EnnemyBehaviour {\n  constructor(ennemy) {\n    this.init(ennemy);\n  }\n\n  init(ennemy) {\n    this.ennemy = ennemy;\n  }\n\n\n  update(timestamp) {\n    this.updateState();\n    this.setSpeed();\n\n    if (this.ennemy.state !== 'DEAD') {\n      this.computePath();      \n    }\n  }\n\n  updateState() {\n    switch (this.ennemy.state) {\n      case 'SPAWN':\n        if (compareArrays(this.ennemy.currentCoord, this.ennemy.targetCoord)) {\n          this.ennemy.targetCoord = this.ennemy.scatterCoord;\n          this.ennemy.state = 'SCATTER'\n        };\n        break;\n      case 'SCATTER':\n        if (compareArrays(this.ennemy.currentCoord, this.ennemy.scatterCoord)) {\n          this.ennemy.state = 'CHASE'\n        };\n        break;\n      case 'CHASE':\n        break;\n    }\n  }\n\n  setSpeed(){\n    if (this.ennemy.state === 'FLEE') {\n      this.ennemy.speed = ANIMATION_DURATION * (1/FLEE_SPEED);\n    }\n    else this.ennemy.speed = ANIMATION_DURATION * (1/NORMAL_SPEED);\n  }\n\n  computePath() {\n    // get all possible tiles for the ennemy\n    const possibleTiles = this.getPossibleTiles();\n    if (possibleTiles.length > 1 && (this.ennemy.state === 'CHASE' || this.ennemy.state === 'FLEE')) {\n      this.getTarget();\n    }\n    // Compute what is the closest possible tile to the target coord\n    let tileToMove;\n    if (this.ennemy.state === \"FLEE\") {\n      tileToMove = this.computeFarthestTileToTarget(possibleTiles);\n    }\n    else tileToMove = this.computeNearestTileToTarget(possibleTiles);\n    if (!tileToMove) return;\n\n    // Set the target coord\n    this.setMovingCoord(tileToMove.coord);\n  }\n\ngetPossibleTiles() {\n    let currentCoord = this.ennemy.currentCoord;\n    // Ennemies can't go backwards\n    let possibleDirections = DIRECTIONS.filter((dir) => dir != this.getOppositeDirection());\n    let adjacentTiles = possibleDirections.map((direction) => {\n      return STATE.board.getNextTileInDirection(currentCoord, direction);\n    });\n\n    return adjacentTiles.filter((tile) => {\n      return this.isTilePossible(tile);\n    })\n  }\n\n\n  isTilePossible(tile) {\n    if (this.ennemy.justSpawned) {\n      return ['PATH', 'GATE', 'HOME'].includes(tile.tileType);\n    }\n    return tile ?.tileType === \"PATH\";\n  }\n\n  computeNearestTileToTarget(possibleTiles) {\n    let targetCoord = this.ennemy.targetCoord;\n    let closestDistance = null;\n    let closestTile = null;\n\n    possibleTiles.forEach((tile) => {\n      let distance = distanceBetweenCoords(tile.coord, targetCoord);\n      if (closestDistance === null || distance < closestDistance) {\n        closestDistance = distance;\n        closestTile = tile;\n      }\n    });\n    return closestTile;\n  }\n\n\n  computeFarthestTileToTarget(possibleTiles) {\n    let targetCoord = this.ennemy.targetCoord;\n    let longestDistance = null;\n    let farthestTile = null;\n\n    possibleTiles.forEach((tile) => {\n      let distance = distanceBetweenCoords(tile.coord, targetCoord);\n      if (longestDistance === null || distance > longestDistance) {\n        longestDistance = distance;\n        farthestTile = tile;\n      }\n    });\n    return farthestTile;\n  }\n\n\n  getTarget() {\n    if (!this.ennemy.state === 'CHASE') return;\n    this.ennemy.justSpawned = false;\n    this.ennemy.targetCoord = STATE.pacman.movingCoord;\n  }\n\n  computeDirection() {\n    const directionCoord = substractCoord(this.ennemy.movingCoord, this.ennemy.currentCoord);\n    return getDirectionFromCoord(directionCoord);\n  }\n\n\n  getOppositeDirection(){\n    switch (this.ennemy.direction){\n      case 'UP':\n        return 'DOWN';\n        break;\n      case 'DOWN':\n        return 'UP';\n        break;\n      case 'LEFT':\n        return 'RIGHT';\n        break;\n      case 'RIGHT':\n        return 'LEFT';\n        break;\n      default:\n        return '';\n    }\n  }\n\n  setMovingCoord(coord) {\n    this.ennemy.movingCoord = coord;\n    this.ennemy.animTimestamp = new Date().getTime();\n    this.ennemy.direction = this.computeDirection();\n    window.setTimeout(() => {\n      this.ennemy.currentCoord = coord;\n    }, this.ennemy.speed);\n  }\n\n  setFleeMode() {\n    if (this.ennemy.state !== 'DEAD') {\n      this.ennemy.state = 'FLEE';\n      this.direction = '';\n    }\n  }\n\n  cancelFleeMode() {\n    var initialState = this.ennemy.state;\n    if (this.ennemy.state === 'FLEE') {\n      this.direction = '';\n      this.ennemy.state = 'CHASE';\n    }\n    if (this.ennemy.state === 'DEAD') {\n      this.ennemy.initInitialProperties();\n    }\n    console.log(initialState, ' => ', this.ennemy.state);\n  }\n\n  setOppositeDirection() {\n    this.ennemy.direction = this.getOppositeDirection();\n  }\n}","const gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nconst SPRITE_SIZE = gameData.spriteSize;\nconst STEP_DURATION = gameData.stepAnimationDuration;\nconst FRAMES_STEP = gameData.framesStep;\n\nconst DIRECTIONS = ['DOWN', 'RIGHT', 'UP', 'LEFT'];\n\nimport { CTX, ENNEMY_HEAD, ENNEMY_BODY } from \"./canvas\";\n\nimport STATE from \"./state\";\n\nexport default class EnnemyAnimation {\n  constructor(ennemy) {\n    this.init(ennemy);\n  }\n\n  init(ennemy) {\n    this.ennemy = ennemy;\n    this.stepAnimationTimeStamp = null;\n    this.stepAnimation = 0;\n  }\n\n\n  draw(timestamp) {\n    if (this.characterIsOutOfScreen() || this.ennemy.state === 'DEAD') {\n      return;\n    }\n    if(!this.stepAnimationTimeStamp){\n      this.stepAnimationTimeStamp = timestamp;\n    }\n    let x, y;\n    [x, y] = this.getCoordToDraw();\n    this.drawOnCanvas(x, y, timestamp);\n  }\n\n  characterIsOutOfScreen() {\n    if (this.ennemy.movingCoord[0] === 27 && this.ennemy.currentCoord[0] === 0) {\n      return true;\n    }\n    if (this.ennemy.movingCoord[0] === 0 && this.ennemy.currentCoord[0] === 27) {\n      return true;\n    }\n    return false;\n  }\n\n  isAnimationFinished() {\n    return this.ennemy.currentCoord === this.ennemy.movingCoord;\n  }\n\n  getCoordToDraw(){\n    let x, y;\n    \n    if (this.isAnimationFinished()) {\n      return this.ennemy.currentCoord;\n    }\n    // Get the percentage of progress of the anim\n    let animationProgress = this.getProgressOfAnimation();\n\n    //Delta of the current tile and target tiles\n    let deltaX = this.ennemy.movingCoord[0] - this.ennemy.currentCoord[0];\n    let deltaY = this.ennemy.movingCoord[1] - this.ennemy.currentCoord[1];\n\n    // Position based on the progress of the animation\n    x = this.ennemy.currentCoord[0] + deltaX * animationProgress;\n    y = this.ennemy.currentCoord[1] + deltaY * animationProgress;\n\n\n    // Setting the position of the pacman\n    return [x, y];\n  }\n\n  incrementStepAnimation(timestamp){\n    this.stepAnimation++;\n    this.stepAnimation = this.stepAnimation % FRAMES_STEP;\n    this.stepAnimationTimeStamp = timestamp;\n  }\n\n  getProgressOfAnimation() {\n    let currentTimeStamp = new Date().getTime();\n    return (currentTimeStamp - this.ennemy.animTimestamp) / this.ennemy.speed;\n  }\n\n\n  drawOnCanvas(x, y, timestamp) {\n    let currentStepDuration = timestamp - this.stepAnimationTimeStamp;\n    if(currentStepDuration > STEP_DURATION){\n      this.incrementStepAnimation(timestamp);\n    }\n\n    this.drawBody(x, y);\n    this.drawHead(x, y);\n  }\n\n\n  drawBody(x, y){\n    const incrementConst = 6;\n\n    CTX.save();\n\n    x = x * TILE_SIZE - incrementConst / 2;\n    y = (y - 0.2) * TILE_SIZE - incrementConst / 2;\n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation;\n    let isReversed = false;\n\n    if(this.ennemy.direction === 'LEFT' || this.ennemy.direction === 'RIGHT'){\n      spriteIndex = 2;\n    }\n\n    if (this.ennemy.direction === 'LEFT') {\n      isReversed = true;\n    }\n\n    if(stepAnimation > 7){\n      spriteIndex++;\n      stepAnimation = stepAnimation % 8;\n    }\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      ENNEMY_BODY,\n      stepAnimation * SPRITE_SIZE,\n      spriteIndex * SPRITE_SIZE,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE + incrementConst,\n      TILE_SIZE + incrementConst,\n    );\n\n    CTX.restore();\n\n\n  }\n\n  drawHead(x, y) {\n    const incrementConst = 6;\n\n    CTX.save();\n\n    x = x * TILE_SIZE - incrementConst / 2;\n    y = (y - 0.6) * TILE_SIZE - incrementConst / 2;\n\n      let spriteIndex = DIRECTIONS.findIndex((direction) => direction === this.ennemy.direction);\n    if (spriteIndex === -1) spriteIndex = 0;\n    let isReversed = false;\n    if (this.ennemy.direction === 'LEFT') {\n      isReversed = true;\n      spriteIndex = 1;\n    }\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      ENNEMY_HEAD,\n      spriteIndex * SPRITE_SIZE,\n      0,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE + incrementConst,\n      TILE_SIZE + incrementConst,\n    );\n\n    CTX.restore();\n  }\n}\n","import {\n  compareArrays\n} from \"./utils\";\n\nimport EnnemyBehaviour from \"./ennemyBehaviour\";\nimport EnnemyAnimation from \"./ennemyAnimation\";\n\nconst gameData = require(\"./data.json\");\n\n//STATE : SPAWN, SCATTER, CHASE, FLEE, DEAD\nexport default class Ennemy {\n  constructor(ennemyData) {\n    this.ennemyData = ennemyData;\n    this.initPermanentProperties();\n    this.initInitialProperties();\n\n    this.ennemyBehaviour = new EnnemyBehaviour(this);\n    this.ennemyAnimation = new EnnemyAnimation(this);\n  }\n\n  initPermanentProperties() {\n    this.beginningGameTimestamp = null;\n  }\n\n  initInitialProperties() {\n    // Actual coord\n    this.currentCoord = this.ennemyData.initialCoord;\n\n    // Coord where the pacman is moving to\n    this.movingCoord = this.currentCoord;\n\n    // Position of the gate to move to\n    this.targetCoord = this.ennemyData.initialTarget;\n    this.scatterCoord = this.ennemyData.scatterTarget;\n    this.spawnTimeout = this.ennemyData.spawnTimeout;\n    this.justSpawned = true;\n\n    // Timestamp fo the start of the animation\n    this.direction = \"\";\n    this.userInputDirection = \"\";\n\n\n    this.beginningGameTimestamp = null;\n    this.animTimestamp = null;\n\n    this.state = 'SPAWN';\n  }\n\n  setFleeMode() {\n    this.ennemyBehaviour.setFleeMode();\n  }\n\n  cancelFleeMode() {\n    this.ennemyBehaviour.cancelFleeMode();\n\n  }\n\n  canMove(timestamp) {\n    if (!this.beginningGameTimestamp) {\n      this.beginningGameTimestamp = timestamp;\n      return false;\n    }\n\n    return (timestamp - this.beginningGameTimestamp) > this.spawnTimeout;\n  }\n\n  setDirection(direction) {\n    this.direction = direction;\n  }\n\n\n  update(timestamp) {\n    if (!this.isAnimationFinished()) return;\n    if (!this.canMove(timestamp)) return;\n\n    this.ennemyBehaviour.update(timestamp);\n  }\n\n  isPacmanKilled(targetCoord) {\n    if (this.state === 'FLEE' || this.state === 'DEAD') return false;\n    return compareArrays(targetCoord, this.currentCoord);\n  }\n\n  isKilled(targetCoord) {\n    if (this.state === 'DEAD') return false;\n    return compareArrays(targetCoord, this.currentCoord);\n  }\n\n  isAnimationFinished() {\n    return this.currentCoord === this.movingCoord;\n  }\n\n  updateAnimation() {\n    return null;\n  }\n\n  draw(timestamp) {\n    this.ennemyAnimation.draw(timestamp);\n  }\n\n  setDead() {\n    this.state = 'DEAD';\n    // console.log('SET ENNEMY DEAD : ', this.state);\n  }\n}","const gameData = require(\"./data.json\");\nconst ANIMATION_DURATION = gameData.animationDuration;\nconst NORMAL_SPEED = gameData.normalPacmanSpeed;\nconst POWERUP_DURATION = gameData.powerUpDuration;\n\n\nimport STATE from \"./state\";\n\nexport default class PacmanBehaviour {\n  constructor(pacman) {\n    this.init(pacman);\n  }\n\n  init(pacman) {\n    this.pacman = pacman;\n  }\n\n \n  update() {\n    this.processTile();\n    this.setSpeed();\n    // If animation still happening, leave\n    let nextTile = this.computePathPacman();\n    if (nextTile) {\n      this.setMovingCoord(nextTile.coord);\n    } else {\n      // If no valid target tile, stop pacman\n      this.pacman.direction = \"\";\n    }\n  }\n\n  setSpeed() {\n    this.pacman.speed = ANIMATION_DURATION * (1/NORMAL_SPEED);\n  }\n\n  processTile() {\n    let currentTile = STATE.board.getTile(this.pacman.currentCoord);\n\n    if (currentTile.hasSuperPoint) {\n      this.startPowerUp();\n    }\n    if (currentTile.hasPoint || currentTile.hasSuperPoint) {\n      this.addScore(10);\n      currentTile.removePoint();\n    }\n\n  }\n\n  addScore(value) {\n    this.pacman.setScore(STATE.score + value);\n  }\n\n  startPowerUp() {  \n    this.pacman.state = \"POWERUP\";\n\n    STATE.ennemies.forEach((ennemy) => {\n      ennemy.setFleeMode();\n    })\n\n    \n    clearTimeout(this.pacman.powerupTimeout);\n    this.pacman.powerupTimeout = setTimeout(this.resetPowerUp.bind(this), POWERUP_DURATION);\n  }\n\n  resetPowerUp() {\n    console.log(\"resetPowerup\");\n    if (this.pacman.state === \"POWERUP\") {\n      this.pacman.state = \"NORMAL\";\n      STATE.ennemies.forEach((ennemy, index) => {\n        console.log('ennemy =>', index);\n        ennemy.cancelFleeMode();\n      })\n    }\n  }\n  \n  computePathPacman() {\n    // If no direction given, leave\n    if (!this.pacman.direction && !this.isUserInputValid()) {\n      return;\n    }\n\n    // Get the next tile in the user given direction\n    let nextTileUserDirection = STATE.board.getNextTileInDirection(\n      this.pacman.currentCoord,\n      this.pacman.userInputDirection\n    );\n\n    // If the user direction is valid\n    if (nextTileUserDirection?.tileType === \"PATH\") {\n      this.confirmUserDirection();\n      return nextTileUserDirection;\n    }\n\n    // Get the next tile in the initial direction\n    let nextTileCurrentDirection = STATE.board.getNextTileInDirection(\n      this.pacman.currentCoord,\n      this.pacman.direction\n    );\n\n    // If the initial direction is valid\n    if (nextTileCurrentDirection?.tileType === \"PATH\") {\n      this.setMovingCoord(nextTileCurrentDirection.coord);\n      return nextTileCurrentDirection;\n    }\n  }\n\n\n  setMovingCoord(coord) {\n    this.pacman.movingCoord = coord;\n    this.pacman.animTimestamp = new Date().getTime();\n    window.setTimeout(() => {\n      this.pacman.currentCoord = coord;\n    }, this.pacman.speed);\n  }\n\n\n\n  isUserInputValid(){\n    let timeSinceLastInput = new Date().getTime() - this.pacman.inputTimestamp;\n    if(timeSinceLastInput > 2000) return null;\n    return this.pacman.userInputDirection;\n  }\n\n  confirmUserDirection() {\n    this.pacman.direction = this.pacman.userInputDirection;\n  }\n\n}\n","const gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nconst SPRITE_SIZE = gameData.spriteSize;\nconst STEP_DURATION = gameData.stepAnimationDuration;\nconst FRAMES_STEP = gameData.framesStep;\n\nimport { CTX, ISAAC_SPRITE, ISAAC_POWERUP } from \"./canvas\";\n\nimport STATE from \"./state\";\n\nexport default class PacmanAnimation {\n  constructor(pacman) {\n    this.init(pacman);\n  }\n\n  init(pacman) {\n    this.pacman = pacman;\n    this.stepAnimationTimeStamp = null;\n    this.stepAnimation = 0;\n    this.speed = 0;\n    this.isFrameAfterDeath = false;\n  }\n\n\n  draw(timestamp) {\n    if (this.characterIsOutOfScreen()) {\n      return;\n    }\n\n    if (this.pacman.state === \"DEAD\" && !this.isFrameAfterDeath) {\n      this.isFrameAfterDeath = true;\n      this.resetAnimation(timestamp);\n    }\n\n    if(!this.stepAnimationTimeStamp){\n      this.stepAnimationTimeStamp = timestamp;\n    }\n    let x, y;\n    [x, y] = this.getCoordToDraw();\n    this.drawOnCanvas(x, y, timestamp);\n  }\n\n  resetAnimation(timestamp) {\n    this.stepAnimation = 0;\n    this.stepAnimationTimeStamp = timestamp;\n  }\n\n  characterIsOutOfScreen() {\n    if (this.pacman.movingCoord[0] === 27 && this.pacman.currentCoord[0] === 0) {\n      return true;\n    }\n    if (this.pacman.movingCoord[0] === 0 && this.pacman.currentCoord[0] === 27) {\n      return true;\n    }\n    return false;\n  }\n\n  getCoordToDraw(){\n    let x, y;\n    if (!this.pacman.direction || this.pacman.state === \"DEAD\") {\n      // If idle, set the pacman at the position of the tile\n      x = this.pacman.currentCoord[0];\n      y = this.pacman.currentCoord[1];\n    }\n    else{\n      // Get the percentage of progress of the anim\n      let animationProgress = this.getProgressOfAnimation();\n      //Delta of the current tile and target tiles\n      let deltaX = this.pacman.movingCoord[0] - this.pacman.currentCoord[0];\n      let deltaY = this.pacman.movingCoord[1] - this.pacman.currentCoord[1];\n\n      // Position based on the progress of the animation\n      x = this.pacman.currentCoord[0] + deltaX * animationProgress;\n      y = this.pacman.currentCoord[1] + deltaY * animationProgress;\n\n      // Setting the position of the pacman\n    }\n\n    return[x,y];\n  }\n\n  incrementStepAnimation(timestamp){\n    if (this.pacman.state === \"DEAD\" && this.stepAnimation > 2) {\n      this.stepAnimation = 3;\n      this.stepAnimationTimeStamp = timestamp;\n    }\n    else {\n      this.stepAnimation++;\n\n      this.stepAnimation = this.stepAnimation % FRAMES_STEP;\n      this.stepAnimationTimeStamp = timestamp;\n    }\n  }\n\n  getProgressOfAnimation() {\n    let currentTimeStamp = new Date().getTime();\n    return (currentTimeStamp - this.pacman.animTimestamp) / this.pacman.speed;\n  }\n\n\n  drawOnCanvas(x, y, timestamp) {\n    let currentStepDuration = timestamp - this.stepAnimationTimeStamp;\n    if(currentStepDuration > STEP_DURATION){\n      this.incrementStepAnimation(timestamp);\n    }\n    if (this.pacman.state === \"DEAD\") {\n      this.drawDeath(x, y);\n    }\n    else {\n      this.drawBody(x, y);\n      if (this.pacman.state === \"POWERUP\") {\n        this.drawHeadPowerup(x, y);\n      }\n      else this.drawHead(x, y);\n    }\n  }\n\n  drawDeath(x, y) {\n    const decalageSource = 6\n    const decalageDestination = 32;\n    const frameCoord = [\n      { x: 0, y: 3 },\n      { x: 0, y: 4 },\n      { x: 2, y: 3 },\n      { x: 3, y: 2 }]\n\n    CTX.save();\n\n    const coordX = x * TILE_SIZE - decalageDestination / 2;\n    const coordY = (y - .5)  * TILE_SIZE - decalageDestination / 2;\n    \n    CTX.drawImage(\n      ISAAC_SPRITE,\n      frameCoord[this.stepAnimation].x * SPRITE_SIZE * 2 + decalageSource,\n    frameCoord[this.stepAnimation].y * SPRITE_SIZE * 2 + decalageSource * 1.5,\n      TILE_SIZE * 2 - decalageSource * 2,\n      TILE_SIZE * 2 -decalageSource * 2,\n      coordX,\n      coordY,\n      TILE_SIZE * 2,\n      TILE_SIZE * 2,\n    );\n\n    CTX.restore();\n    \n  }\n\n\n  drawBody(x, y){\n    const incrementConst = 6;\n\n    CTX.save();\n\n    x = x * TILE_SIZE - incrementConst / 2;\n    y = (y - 0.1) * TILE_SIZE - incrementConst / 2;\n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation;\n    let stepAnimationShift = 7;\n    let stepAnimationModulo = 8;\n    let isReversed = false;\n\n    if(this.pacman.direction === 'LEFT' || this.pacman.direction === 'RIGHT'){\n      spriteIndex = 2;\n      stepAnimationShift = 0;\n\n    }\n\n    if (this.pacman.direction === 'LEFT') {\n      isReversed = true;\n    }\n\n    stepAnimation += stepAnimationShift;\n\n    if(stepAnimation >= stepAnimationModulo){\n      spriteIndex++;\n      stepAnimation = stepAnimation % stepAnimationModulo;\n    }\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      ISAAC_SPRITE,\n      stepAnimation * SPRITE_SIZE,\n      spriteIndex * SPRITE_SIZE,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE + incrementConst,\n      TILE_SIZE + incrementConst,\n    );\n\n    CTX.restore();\n\n  }\n\n  drawHead(x, y) {\n    const incrementConst = 6;\n\n    CTX.save();\n\n    x = x * TILE_SIZE - incrementConst / 2;\n    y = (y - 0.50) * TILE_SIZE - incrementConst / 2;\n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation >= 8 ? 1 : 0;\n    let isReversed = false;\n    let stepAnimationShift = 0;\n\n    if (this.pacman.direction === 'UP') {\n      stepAnimationShift = 4;\n    }\n    if (this.pacman.direction === 'RIGHT') {\n      stepAnimationShift = 2;\n    }\n    if (this.pacman.direction === 'LEFT') {\n      stepAnimationShift = 2;\n      isReversed = true;\n    }\n\n\n\n    stepAnimation += stepAnimationShift;\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      ISAAC_SPRITE,\n      stepAnimation * SPRITE_SIZE,\n      0,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE + incrementConst,\n      TILE_SIZE + incrementConst,\n    );\n\n    CTX.restore();\n  }\n\n\n  drawHeadPowerup(x, y) {\n    const decalageSource = 4;\n    const decalageDestination = 12;\n    const incrementConst = 0;\n\n    CTX.save();\n \n    let coordX = x * TILE_SIZE - SPRITE_SIZE /2;\n    let coordY = (y-.6)    * TILE_SIZE - SPRITE_SIZE /2 ;\n        \n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation > 4 ? 1 : this.stepAnimation;\n    let isReversed = false;\n\n    if (this.pacman.direction === 'LEFT') {\n      isReversed = true;\n    }\n\n\n    if (isReversed) {\n      CTX.translate( coordX + SPRITE_SIZE * 1.85, coordY);\n      CTX.scale(-1, 1);\n      coordX = 0;\n      coordY = 0\n    }\n\n    console.log(stepAnimation * SPRITE_SIZE);\n\n    CTX.drawImage(\n      ISAAC_POWERUP,\n      stepAnimation * SPRITE_SIZE * 2 + decalageSource,\n      0,\n      TILE_SIZE *2 - decalageSource * 2,\n      TILE_SIZE* 2 - decalageSource * 2,\n      coordX,\n      coordY,\n      TILE_SIZE * 2  + incrementConst,\n      TILE_SIZE * 2 + incrementConst,\n    );\n\n    CTX.restore();\n  }\n}\n","import { SCORE_ELEMENT } from \"./canvas\";\n\nimport PacmanBehaviour from \"./pacmanBehaviour\";\nimport PacmanAnimation from \"./pacmanAnimation\";\n\nimport STATE from \"./state\";\nexport default class Pacman {\n  constructor(coord) {\n    this.init(coord);\n    this.pacmanBehaviour = new PacmanBehaviour(this);\n    this.pacmanAnimation = new PacmanAnimation(this);\n  }\n\n  init(coord = [1, 14]) {\n    // Actual coord of the pacman\n  this.currentCoord = coord;\n\n    // Coord where the pacman is moving to\n  this.movingCoord = coord;\n\n    // Possible state : NORMAL, POWERUP, DEAD\n\n    // Timestamp fo the start of the animation\n\n    this.direction = \"\";\n\n    this.userInputDirection = \"\";\n    this.inputTimestamp = null;\n    this.powerupTimeout;\n    this.state = 'NORMAL';\n  }\n\n\n  update() {\n    if (!this.isAnimationFinished()) {\n      return;\n    }\n\n    this.pacmanBehaviour.update();\n  }\n\n  \n  \n\n  setScore(score) {\n    STATE.score = score;\n    SCORE_ELEMENT.textContent = STATE.score;\n  }\n\n  setUserInputDirection(direction) {\n    this.userInputDirection = direction;\n    this.inputTimestamp = new Date().getTime();\n  }\n\n  isAnimationFinished() {\n    return this.currentCoord === this.movingCoord;\n  }\n\n  setDead() {\n    this.state = \"DEAD\";\n  }\n\n  draw(timestamp) {\n    this.pacmanAnimation.draw(timestamp);\n  }\n\n}\n","import Board from \"./board\";\nimport {\n  CANVAS_ELEMENT,\n  CTX\n} from \"./canvas\";\nimport Ennemy from \"./ennemy\";\nimport Pacman from \"./pacman\";\nimport STATE from \"./state\";\n\nconst gameData = require(\"./data.json\");\nconst ENNEMIES_DATA = gameData.ennemiesData;\n\nexport default class Game {\n  constructor() {\n\n    STATE.score = 0;\n    // Possible state : STOPPED, START, GAME, CHASE\n    STATE.gameState = \"START\";\n\n    this.initGame();\n  }\n\n  initGame() {\n    STATE.board = new Board();\n    STATE.pacman = new Pacman();\n    STATE.ennemies = this.initEnnemies();\n\n    // START, END\n    STATE.gameState = 'START';\n\n    this.draw();\n  }\n\n  startGameLoop() {\n    this.bindEventHandler();\n    window.requestAnimationFrame(this.loop.bind(this));\n  }\n\n  loop(timestamp) {\n    let progress = timestamp - this.lastRender;\n    this.lastRender = timestamp;\n\n    this.draw(progress, timestamp);\n    this.update(progress, timestamp);\n\n    window.requestAnimationFrame(this.loop.bind(this));\n  }\n\n  update(progress, timestamp) {\n    // Update the state of the world for the elapsed time since last render\n    this.updateGameState();\n    if (STATE.gameState !== 'END') {\n      STATE.pacman.update();\n      this.updateEnnemies(timestamp);\n    }\n  }\n  \n  updateGameState() {\n    if (STATE.pacman.state === 'POWERUP') {\n      this.killTouchedEnnemies();\n    }\n    if (this.isPacmanDead()) {\n      STATE.pacman.setDead();\n      STATE.gameState = 'END';\n    }\n  }\n\n  killTouchedEnnemies() {\n    for (let i = 0; i < STATE.ennemies.length; i++){\n      let ennemy = STATE.ennemies[i];\n      if (ennemy.isKilled(STATE.pacman.currentCoord)) {\n        ennemy.setDead();\n      }\n    }\n    \n  }\n\n  isPacmanDead() {\n    let pacmanIsDead = false;\n    ennemyLoop : for (let i = 0; i < STATE.ennemies.length; i++){\n      let ennemy = STATE.ennemies[i];\n      if (ennemy.isPacmanKilled(STATE.pacman.currentCoord)) {\n        pacmanIsDead = true;\n        break ennemyLoop;\n      }\n    }\n    return pacmanIsDead;    \n  }\n\n  draw(progress, timestamp) {\n    // Reinit the canvas\n    CTX.fillStyle = \"#2c2a2a\";\n    CTX.fillRect(0, 0, CANVAS_ELEMENT.width, CANVAS_ELEMENT.height);\n    // Update the state of the world for the elapsed time since last render\n    STATE.board.drawBoard();\n    this.drawEnnemies(timestamp);\n    STATE.pacman.draw(timestamp);\n  }\n\n\n  ////////////////////////////////////\n  // ENNEMIES\n  ////////////////////////////////////\n  initEnnemies() {\n    const ennemies = [];\n    ENNEMIES_DATA.forEach((ennemyData) => {\n      ennemies.push(new Ennemy(ennemyData));\n    });\n    return ennemies;\n  }\n\n  updateEnnemies(timestamp) {\n    STATE.ennemies.forEach((ennemy) => {\n      ennemy.update(timestamp);\n    });\n  }\n\n  drawEnnemies(timestamp) {\n    STATE.ennemies.forEach((ennemy) => {\n      ennemy.draw(timestamp);\n    });\n  }\n\n\n  bindEventHandler() {\n    document.addEventListener(\"keydown\", this.keydownEventHandler.bind(this));\n  }\n\n  unbindEventHandler() {\n    document.removeEventListener(\"keydown\", this.keydownEventHandler);\n  }\n\n  keydownEventHandler(event) {\n    let keycode = event.which;\n\n    // LEFT : ARROW_LEFT or Q\n    if (keycode === 37 || keycode === 81) {\n      STATE.pacman.setUserInputDirection(\"LEFT\");\n      event.preventDefault();\n    }\n    // RIGHT : ARROW_RIGHT or D\n    if (keycode === 39 || keycode === 68) {\n      STATE.pacman.setUserInputDirection(\"RIGHT\");\n    event.preventDefault();\n    }\n    // UP : ARROW_UP or Z\n    if (keycode === 38 || keycode === 90) {\n      STATE.pacman.setUserInputDirection(\"UP\");\n    event.preventDefault();\n    }\n    // DOWN : ARROW_DOWN or S\n    if (keycode === 40 || keycode === 83) {\n      STATE.pacman.setUserInputDirection(\"DOWN\");\n    event.preventDefault();\n    }\n  }\n}","import Game from \"./game\";\n\nfunction docReady(fn) {\n    // see if DOM is already available\n    if (document.readyState === \"complete\" || document.readyState === \"interactive\") {\n        // call on next available tick\n        setTimeout(fn, 1);\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", fn);\n    }\n}    \n\n\ndocReady(()=>{\n    const game = new Game();\n    game.initGame();\n    game.startGameLoop();\n})\n\n"]}