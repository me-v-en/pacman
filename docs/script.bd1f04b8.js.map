{"version":3,"sources":["script/canvas.js","script/data.json","script/utils.js","script/tile.js","script/state.js","script/board.js","script/ennemyBehaviour.js","script/ennemyAnimation.js","script/ennemy.js","script/pacmanBehaviour.js","script/pacmanAnimation.js","script/pacman.js","script/game.js","script/index.js"],"names":["CANVAS_ELEMENT","document","getElementById","SCORE_ELEMENT","CTX","canvas","getContext","imageSmoothingEnabled","BG_IMAGE","COIN_IMAGE","PILL_IMAGE","ISAAC_SPRITE","ENNEMY_HEAD","ENNEMY_BODY","module","exports","animationDuration","stepAnimationDuration","framesStep","spriteSize","tileSize","boardWidth","boardHeight","canvasWidth","canvasHeight","ennemiesData","initialCoord","initialTarget","scatterTarget","spawnTimeout","boardArray","gameData","require","CANVAS_WIDTH","CANVAS_HEIGHT","DIRECTION_MATRICES","modulo","n","m","mod","Math","abs","moduloCoord","coord","getDirectionFromCoord","directionObject","Object","entries","find","directionCoord","compareArrays","addCoord","coord1","coord2","map","value","index","substractCoord","distanceBetweenCoords","part1","pow","part2","sqrt","a","b","length","i","TILE_SIZE","Tile","initialData","tileType","hasPoint","hasSuperPoint","drawImage","incrementConst","State","initState","score","gameState","board","pacman","ennemies","STATE","BOARD_ARRAY","BOARD_WIDTH","BOARD_HEIGHT","Board","boardTiles","initBoard","y","line","x","tile","push","coordX","coordY","width","height","drawTiles","forEach","row","drawTile","currentCoord","direction","directionMatrice","coordToMove","getTile","ANIMATION_DURATION","DIRECTIONS","EnnemyBehaviour","ennemy","init","timestamp","updateState","computePath","state","targetCoord","scatterCoord","possibleTiles","getPossibleTiles","getTarget","tileToMove","computeNearestTileToTarget","setMovingCoord","adjacentTiles","filter","dir","getOppositeDirection","getNextTileInDirection","isTilePossible","justSpawned","includes","closestDistance","closestTile","distance","movingCoord","animTimestamp","Date","getTime","computeDirection","window","setTimeout","SPRITE_SIZE","STEP_DURATION","FRAMES_STEP","EnnemyAnimation","stepAnimationTimeStamp","stepAnimation","characterIsOutOfScreen","getCoordToDraw","drawOnCanvas","isAnimationFinished","animationProgress","getProgressOfAnimation","deltaX","deltaY","incrementStepAnimation","drawBody","drawHead","save","spriteIndex","isReversed","translate","scale","restore","findIndex","Ennemy","ennemyBehaviour","ennemyAnimation","ennemyData","userInputDirection","beginningGameTimestamp","canMove","update","draw","PacmanBehaviour","nextTile","computePathPacman","isUserInputValid","nextTileUserDirection","confirmUserDirection","nextTileCurrentDirection","timeSinceLastInput","inputTimestamp","PacmanAnimation","isFrameAfterDeath","resetAnimation","drawDeath","decalageSource","frameCoord","decalageDestination","stepAnimationShift","Pacman","pacmanBehaviour","pacmanAnimation","addPoint","currentTile","addScore","removePoint","setScore","textContent","ENNEMIES_DATA","Game","initGame","initEnnemies","bindEventHandler","requestAnimationFrame","loop","bind","progress","lastRender","updateGameState","updateEnnemies","isPacmanDead","setDead","pacmanIsDead","ennemyLoop","isPacmanKilled","fillStyle","fillRect","drawBoard","drawEnnemies","addEventListener","keydownEventHandler","removeEventListener","event","keycode","which","setUserInputDirection","preventDefault","docReady","fn","readyState","game","startGameLoop"],"mappings":"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","file":"script.bd1f04b8.js","sourceRoot":"..","sourcesContent":["export const CANVAS_ELEMENT = document.getElementById(\"canvas\");\nexport const SCORE_ELEMENT = document.getElementById(\"score\");\nexport const CTX = canvas.getContext(\"2d\");\nCTX.imageSmoothingEnabled = false;\n\nexport const BG_IMAGE = document.getElementById(\"bgBoard\");\nexport const COIN_IMAGE = document.getElementById(\"coin\");\nexport const PILL_IMAGE = document.getElementById(\"pill\");\nexport const ISAAC_SPRITE = document.getElementById(\"isaacSprite\");\nexport const ENNEMY_HEAD = document.getElementById(\"ennemyHead\");\nexport const ENNEMY_BODY = document.getElementById(\"ennemyBody\");\n","module.exports={animationDuration:200,stepAnimationDuration:100,framesStep:10,spriteSize:32,tileSize:32,boardWidth:28,boardHeight:31,canvasWidth:840,canvasHeight:930,ennemiesData:[{initialCoord:[12,13],initialTarget:[13,11],scatterTarget:[1,26],spawnTimeout:2e3},{initialCoord:[13,13],initialTarget:[13,11],scatterTarget:[1,1],spawnTimeout:4e3},{initialCoord:[14,13],initialTarget:[13,11],scatterTarget:[26,1],spawnTimeout:6e3},{initialCoord:[15,13],initialTarget:[14,11],scatterTarget:[26,29],spawnTimeout:8e3}],boardArrayh\",\"h\",\"h\",\"h\",\"h\",\"h\",\"X\",\".\",\"X\",\"X\",\".\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"X\",\"h\",\"h\",\"h\",\"h\",\"h\",\"h\",\"X\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\".\",\"X\",\"X\",\".\",\"X\",\"h\",\"h\",\"h\",\"h\",\"h\",\"h};","let gameData = require(\"./data.json\");\nconst CANVAS_WIDTH = gameData.canvasWidth;\nconst CANVAS_HEIGHT = gameData.canvasHeight;\n\n\nexport const DIRECTION_MATRICES = {\n    'LEFT' : [-1, 0],\n    'RIGHT' : [1, 0],\n    'UP' : [0, -1],\n    'DOWN' : [0, 1]\n\n}\n\nexport function modulo(n, m) {\n    var mod = ((n % m) + m) % m;\n    return mod < 0 ? mod + Math.abs(m) : mod;\n};\n\nexport function moduloCoord(coord) {\n    return [modulo(coord[0], CANVAS_WIDTH), modulo(coord[1], CANVAS_HEIGHT)]\n};\n\nexport function getDirectionFromCoord(coord){\n    const directionObject = Object.entries(DIRECTION_MATRICES).find(([direction, directionCoord])=>{\n        return compareArrays(coord, directionCoord);\n    });\n    if (directionObject) {\n    return directionObject[0];\n    }    \n}\n    \n\nexport function addCoord(coord1, coord2) {\n    return coord1.map((value, index) => value += coord2[index]);\n};\n\nexport function substractCoord(coord1, coord2) {\n    return coord1.map((value, index) => value -= coord2[index]);\n};\n\nexport function distanceBetweenCoords(coord1, coord2) {\n    let part1 = Math.pow(coord1[0] - coord2[0], 2);\n    let part2 = Math.pow(coord1[1] - coord2[1], 2);\n    return Math.sqrt(part1 + part2);\n};\n\nexport function compareArrays(a, b){\n  // if length is not equal\n  if(a?.length != b?.length)   return false;\n\n  // comapring each element of array\n   for(var i=0;i<a.length;i++){\n   if(a[i]!=b[i]) return false;\n   }\n    return true;\n  }","import { CTX, COIN_IMAGE, PILL_IMAGE } from \"./canvas\";\nimport {compareArrays} from \"./utils\";\n\nlet gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nexport default class Tile {\n  constructor(initialData, coord) {\n    //possible tileType : 'PATH', 'WALL', 'GATE', 'HOME'\n    this.tileType = \"\";\n    this.coord = coord;\n    this.hasPoint = false;\n    this.hasSuperPoint = false;\n\n    switch (initialData) {\n      case \"X\":\n        this.tileType = \"WALL\";\n        break;\n      case \".\":\n        this.tileType = \"PATH\";\n        this.hasPoint = true;\n        break;\n      case \"O\":\n        this.tileType = \"PATH\";\n        this.hasSuperPoint = true;\n        break;\n      case \"-\":\n        this.tileType = \"GATE\";\n        break;\n      case \"h\":\n        this.tileType = \"HOME\";\n        break;\n      default:\n        break;\n    }\n  }\n\n  removePoint() {\n    this.hasPoint = false;\n    this.hasSuperPoint = false;\n  }\n\n  drawTile() {\n    if (this.hasPoint) {\n    CTX.drawImage(\n      COIN_IMAGE,\n      this.coord[0] * TILE_SIZE,\n      this.coord[1] * TILE_SIZE,\n      TILE_SIZE,\n      TILE_SIZE\n    );\n    }\n\n    if (this.hasSuperPoint) {\n      const incrementConst = 16;\n\n      CTX.drawImage(\n        PILL_IMAGE,\n        this.coord[0] * TILE_SIZE - incrementConst/2,\n        this.coord[1] * TILE_SIZE - incrementConst/2,\n        TILE_SIZE + incrementConst,\n        TILE_SIZE + incrementConst\n      );\n      }\n    }\n  }\n\n","class State {\n  constructor() {\n    this.initState();\n  }\n\n  initState() {\n    this.score = 0;\n    this.gameState = 'START';\n    this.board;\n    this.pacman;\n    this.ennemies;\n  }\n}\n\nconst STATE = new State();\nexport default {STATE};\n","import Tile from \"./tile\";\nimport { CANVAS_ELEMENT, CTX, BG_IMAGE } from \"./canvas\";\nimport { modulo, addCoord,  DIRECTION_MATRICES } from \"./utils\";\n\nimport STATE from \"./state\";\n\nlet gameData = require(\"./data.json\");\nconst BOARD_ARRAY = gameData.boardArray;\nconst BOARD_WIDTH = gameData.boardArray[0].length;\nconst BOARD_HEIGHT = gameData.boardArray.length;\nconst CANVAS_WIDTH = gameData.canvasWidth;\nconst CANVAS_HEIGHT = gameData.canvasHeight;\n\nexport default class Board {\n  constructor() {\n    this.boardTiles = [];\n    this.initBoard();\n  }\n\n  initBoard() {\n    this.boardTiles = [];\n    for (let y = 0; y < BOARD_HEIGHT; y++) {\n      let line = [];\n      for (let x = 0; x < BOARD_WIDTH; x++) {\n        let tile = new Tile(BOARD_ARRAY[y][x], [x, y]);\n        line.push(tile);\n      }\n      this.boardTiles.push(line);\n    }\n  }\n\n  getTile(coord) {\n    if (coord) {\n      let coordX = modulo(coord[0], BOARD_WIDTH);\n      let coordY = modulo(coord[1], BOARD_HEIGHT);\n      return this.boardTiles[coordY][coordX];\n    }\n  }\n\n  drawBoard() {\n    CTX.drawImage(BG_IMAGE, 0, 0, CANVAS_ELEMENT.width, CANVAS_ELEMENT.height);\n    this.drawTiles();\n  }\n\n  drawTiles() {\n    this.boardTiles.forEach((row) => {\n      row.forEach((tile) => {\n        tile.drawTile();\n      });\n    });\n  }\n\n  getNextTileInDirection(currentCoord, direction) {\n    if (!direction || !currentCoord) {\n      return false;\n    }\n\n    let directionMatrice = DIRECTION_MATRICES[direction];\n    let coordToMove = addCoord(directionMatrice, currentCoord);\n    return STATE.board.getTile(coordToMove);\n  }\n}\n","const gameData = require(\"./data.json\");\nconst ANIMATION_DURATION = gameData.animationDuration;\n\n\nimport STATE from \"./state\";\n\nimport {\n  getDirectionFromCoord,\n  compareArrays,\n  substractCoord,\n  distanceBetweenCoords\n} from \"./utils\";\n\n\nconst DIRECTIONS = ['DOWN', 'UP', 'RIGHT', 'LEFT'];\n\nexport default class EnnemyBehaviour {\n  constructor(ennemy) {\n    this.init(ennemy);\n  }\n\n  init(ennemy) {\n    this.ennemy = ennemy;\n  }\n\n\n  update(timestamp) {\n    this.updateState();\n\n    this.computePath();\n  }\n\n  updateState() {\n    switch (this.ennemy.state) {\n      case 'SPAWN':\n        if (compareArrays(this.ennemy.currentCoord, this.ennemy.targetCoord)) {\n          this.ennemy.targetCoord = this.ennemy.scatterCoord;\n          this.ennemy.state = 'SCATTER'\n        };\n        break;\n      case 'SCATTER':\n        if (compareArrays(this.ennemy.currentCoord, this.ennemy.scatterCoord)) {\n          this.ennemy.state = 'CHASE'\n        };\n        break;\n      case 'CHASE':\n        break;\n    }\n  }\n\n  computePath() {\n    // get all possible tiles for the ennemy\n    const possibleTiles = this.getPossibleTiles();\n    if (possibleTiles.length > 1 && this.ennemy.state === 'CHASE') {\n      this.getTarget();\n    }\n    // Compute what is the closest possible tile to the target coord\n    const tileToMove = this.computeNearestTileToTarget(possibleTiles);\n    if (!tileToMove) return;\n\n    // Set the target coord\n    this.setMovingCoord(tileToMove.coord);\n  }\n\ngetPossibleTiles() {\n    let currentCoord = this.ennemy.currentCoord;\n    // Ennemies can't go backwards\n    let possibleDirections = DIRECTIONS.filter((dir) => dir != this.getOppositeDirection());\n    let adjacentTiles = possibleDirections.map((direction) => {\n      return STATE.board.getNextTileInDirection(currentCoord, direction);\n    });\n\n    return adjacentTiles.filter((tile) => {\n      return this.isTilePossible(tile);\n    })\n  }\n\n\n  isTilePossible(tile) {\n    if (this.ennemy.justSpawned) {\n      return ['PATH', 'GATE', 'HOME'].includes(tile.tileType);\n    }\n    return tile ?.tileType === \"PATH\";\n  }\n\n  computeNearestTileToTarget(possibleTiles) {\n    let targetCoord = this.ennemy.targetCoord;\n    let closestDistance = null;\n    let closestTile = null;\n\n    possibleTiles.forEach((tile) => {\n      let distance = distanceBetweenCoords(tile.coord, targetCoord);\n      if (closestDistance === null || distance < closestDistance) {\n        closestDistance = distance;\n        closestTile = tile;\n      }\n    });\n    return closestTile;\n  }\n\n  getTarget() {\n    if (!this.ennemy.state === 'CHASE') return;\n    this.ennemy.justSpawned = false;\n    this.ennemy.targetCoord = STATE.pacman.movingCoord;\n  }\n\n  computeDirection() {\n    const directionCoord = substractCoord(this.ennemy.movingCoord, this.ennemy.currentCoord);\n    return getDirectionFromCoord(directionCoord);\n  }\n\n\n  getOppositeDirection(){\n    switch (this.ennemy.direction){\n      case 'UP':\n        return 'DOWN';\n        break;\n      case 'DOWN':\n        return 'UP';\n        break;\n      case 'LEFT':\n        return 'RIGHT';\n        break;\n      case 'RIGHT':\n        return 'LEFT';\n        break;\n      default:\n        return null;\n    }\n  }\n\n  setMovingCoord(coord) {\n    this.ennemy.movingCoord = coord;\n    this.ennemy.animTimestamp = new Date().getTime();\n    this.ennemy.direction = this.computeDirection();\n    window.setTimeout(() => {\n      this.ennemy.currentCoord = coord;\n    }, ANIMATION_DURATION);\n  }\n}","const gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nconst SPRITE_SIZE = gameData.spriteSize;\nconst ANIMATION_DURATION = gameData.animationDuration;\nconst STEP_DURATION = gameData.stepAnimationDuration;\nconst FRAMES_STEP = gameData.framesStep;\n\nconst DIRECTIONS = ['DOWN', 'RIGHT', 'UP', 'LEFT'];\n\nimport { CTX, ENNEMY_HEAD, ENNEMY_BODY } from \"./canvas\";\n\nimport STATE from \"./state\";\n\nexport default class EnnemyAnimation {\n  constructor(ennemy) {\n    this.init(ennemy);\n  }\n\n  init(ennemy) {\n    this.ennemy = ennemy;\n    this.stepAnimationTimeStamp = null;\n    this.stepAnimation = 0;\n  }\n\n\n  draw(timestamp) {\n    if (this.characterIsOutOfScreen()) {\n      return;\n    }\n    if(!this.stepAnimationTimeStamp){\n      this.stepAnimationTimeStamp = timestamp;\n    }\n    let x, y;\n    [x, y] = this.getCoordToDraw();\n    this.drawOnCanvas(x, y, timestamp);\n  }\n\n  characterIsOutOfScreen() {\n    if (this.ennemy.movingCoord[0] === 27 && this.ennemy.currentCoord[0] === 0) {\n      return true;\n    }\n    if (this.ennemy.movingCoord[0] === 0 && this.ennemy.currentCoord[0] === 27) {\n      return true;\n    }\n    return false;\n  }\n\n  isAnimationFinished() {\n    return this.ennemy.currentCoord === this.ennemy.movingCoord;\n  }\n\n  getCoordToDraw(){\n    let x, y;\n    \n    if (this.isAnimationFinished()) {\n      return this.ennemy.currentCoord;\n    }\n    // Get the percentage of progress of the anim\n    let animationProgress = this.getProgressOfAnimation();\n\n    //Delta of the current tile and target tiles\n    let deltaX = this.ennemy.movingCoord[0] - this.ennemy.currentCoord[0];\n    let deltaY = this.ennemy.movingCoord[1] - this.ennemy.currentCoord[1];\n\n    // Position based on the progress of the animation\n    x = this.ennemy.currentCoord[0] + deltaX * animationProgress;\n    y = this.ennemy.currentCoord[1] + deltaY * animationProgress;\n\n\n    // Setting the position of the pacman\n    return [x, y];\n  }\n\n  incrementStepAnimation(timestamp){\n    this.stepAnimation++;\n    this.stepAnimation = this.stepAnimation % FRAMES_STEP;\n    this.stepAnimationTimeStamp = timestamp;\n  }\n\n  getProgressOfAnimation() {\n    let currentTimeStamp = new Date().getTime();\n    return (currentTimeStamp - this.ennemy.animTimestamp) / ANIMATION_DURATION;\n  }\n\n\n  drawOnCanvas(x, y, timestamp) {\n    let currentStepDuration = timestamp - this.stepAnimationTimeStamp;\n    if(currentStepDuration > STEP_DURATION){\n      this.incrementStepAnimation(timestamp);\n    }\n\n    this.drawBody(x, y);\n    this.drawHead(x, y);\n  }\n\n\n  drawBody(x, y){\n    const incrementConst = 6;\n\n    CTX.save();\n\n    x = x * TILE_SIZE - incrementConst / 2;\n    y = (y - 0.2) * TILE_SIZE - incrementConst / 2;\n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation;\n    let isReversed = false;\n\n    if(this.ennemy.direction === 'LEFT' || this.ennemy.direction === 'RIGHT'){\n      spriteIndex = 2;\n    }\n\n    if (this.ennemy.direction === 'LEFT') {\n      isReversed = true;\n    }\n\n    if(stepAnimation > 7){\n      spriteIndex++;\n      stepAnimation = stepAnimation % 8;\n    }\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      ENNEMY_BODY,\n      stepAnimation * SPRITE_SIZE,\n      spriteIndex * SPRITE_SIZE,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE + incrementConst,\n      TILE_SIZE + incrementConst,\n    );\n\n    CTX.restore();\n\n\n  }\n\n  drawHead(x, y) {\n    const incrementConst = 6;\n\n    CTX.save();\n\n    x = x * TILE_SIZE - incrementConst / 2;\n    y = (y - 0.6) * TILE_SIZE - incrementConst / 2;\n\n      let spriteIndex = DIRECTIONS.findIndex((direction) => direction === this.ennemy.direction);\n    if (spriteIndex === -1) spriteIndex = 0;\n    let isReversed = false;\n    if (this.ennemy.direction === 'LEFT') {\n      isReversed = true;\n      spriteIndex = 1;\n    }\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      ENNEMY_HEAD,\n      spriteIndex * SPRITE_SIZE,\n      0,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE + incrementConst,\n      TILE_SIZE + incrementConst,\n    );\n\n    CTX.restore();\n  }\n}\n","import {\n  getDirectionFromCoord,\n  compareArrays,\n  substractCoord\n} from \"./utils\";\n\nimport EnnemyBehaviour from \"./ennemyBehaviour\";\nimport EnnemyAnimation from \"./ennemyAnimation\";\n\nconst gameData = require(\"./data.json\");\n\n//STATE : SPAWN, SCATTER, CHASE\nexport default class Ennemy {\n  constructor(coord) {\n    this.init(coord);\n    this.ennemyBehaviour = new EnnemyBehaviour(this);\n    this.ennemyAnimation = new EnnemyAnimation(this);\n  }\n\n  init(ennemyData) {\n    this.ennemyData = ennemyData;\n    // Actual coord\n    this.currentCoord = ennemyData.initialCoord;\n\n    // Coord where the pacman is moving to\n    this.movingCoord = this.currentCoord;\n\n    // Position of the gate to move to\n    this.targetCoord = ennemyData.initialTarget;\n    this.scatterCoord = ennemyData.scatterTarget;\n    this.spawnTimeout = ennemyData.spawnTimeout;\n    this.justSpawned = true;\n\n    // Timestamp fo the start of the animation\n    this.direction = \"\";\n    this.userInputDirection = \"\";\n\n\n    this.beginningGameTimestamp = null;\n    this.animTimestamp = null;\n\n    this.state = 'SPAWN';\n  }\n\n  canMove(timestamp) {\n    if (!this.beginningGameTimestamp) {\n      this.beginningGameTimestamp = timestamp;\n      return false;\n    }\n\n    return (timestamp - this.beginningGameTimestamp) > this.spawnTimeout;\n  }\n\n  setDirection(direction) {\n    this.direction = direction;\n  }\n\n\n  update(timestamp) {\n    if (!this.isAnimationFinished()) return;\n    if (!this.canMove(timestamp)) return;\n\n    this.ennemyBehaviour.update(timestamp);\n  }\n\n  isPacmanKilled(targetCoord) {\n    return compareArrays(targetCoord, this.currentCoord);\n  }\n\n  isAnimationFinished() {\n    return this.currentCoord === this.movingCoord;\n  }\n\n  updateAnimation() {\n    return null;\n  }\n\n  draw(timestamp) {\n    this.ennemyAnimation.draw(timestamp);\n  }\n}","const gameData = require(\"./data.json\");\nconst ANIMATION_DURATION = gameData.animationDuration;\n\n\nimport STATE from \"./state\";\n\nexport default class PacmanBehaviour {\n  constructor(pacman) {\n    this.init(pacman);\n  }\n\n  init(pacman) {\n    this.pacman = pacman;\n  }\n\n\n  update() {\n    // If animation still happening, leave\n    let nextTile = this.computePathPacman();\n    if (nextTile) {\n      this.setMovingCoord(nextTile.coord);\n    } else {\n      // If no valid target tile, stop pacman\n      this.pacman.direction = \"\";\n      this.pacman.state = \"IDLE\";\n    }\n  }\n\n  computePathPacman() {\n    // If no direction given, leave\n    if (!this.pacman.direction && !this.isUserInputValid()) {\n      return;\n    }\n\n    // Get the next tile in the user given direction\n    let nextTileUserDirection = STATE.board.getNextTileInDirection(\n      this.pacman.currentCoord,\n      this.pacman.userInputDirection\n    );\n\n    // If the user direction is valid\n    if (nextTileUserDirection?.tileType === \"PATH\") {\n      this.confirmUserDirection();\n      return nextTileUserDirection;\n    }\n\n    // Get the next tile in the initial direction\n    let nextTileCurrentDirection = STATE.board.getNextTileInDirection(\n      this.pacman.currentCoord,\n      this.pacman.direction\n    );\n\n    // If the initial direction is valid\n    if (nextTileCurrentDirection?.tileType === \"PATH\") {\n      this.setMovingCoord(nextTileCurrentDirection.coord);\n      return nextTileCurrentDirection;\n    }\n  }\n\n\n  setMovingCoord(coord) {\n    this.pacman.state = \"MOVING\";\n    this.pacman.movingCoord = coord;\n    this.pacman.animTimestamp = new Date().getTime();\n    window.setTimeout(() => {\n      this.pacman.currentCoord = coord;\n    }, ANIMATION_DURATION);\n  }\n\n\n\n  isUserInputValid(){\n    let timeSinceLastInput = new Date().getTime() - this.pacman.inputTimestamp;\n    if(timeSinceLastInput > 2000) return null;\n    return this.pacman.userInputDirection;\n  }\n\n  confirmUserDirection() {\n    this.pacman.direction = this.pacman.userInputDirection;\n  }\n\n}\n","const gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nconst SPRITE_SIZE = gameData.spriteSize;\nconst ANIMATION_DURATION = gameData.animationDuration;\nconst STEP_DURATION = gameData.stepAnimationDuration;\nconst FRAMES_STEP = gameData.framesStep;\n\nimport { CTX, ISAAC_SPRITE } from \"./canvas\";\n\nimport STATE from \"./state\";\n\nexport default class PacmanAnimation {\n  constructor(pacman) {\n    this.init(pacman);\n  }\n\n  init(pacman) {\n    this.pacman = pacman;\n    this.stepAnimationTimeStamp = null;\n    this.stepAnimation = 0;\n    this.isFrameAfterDeath = false;\n  }\n\n\n  draw(timestamp) {\n    if (this.characterIsOutOfScreen()) {\n      return;\n    }\n\n    if (this.pacman.state === \"DEAD\" && !this.isFrameAfterDeath) {\n      this.isFrameAfterDeath = true;\n      this.resetAnimation(timestamp);\n    }\n\n    if(!this.stepAnimationTimeStamp){\n      this.stepAnimationTimeStamp = timestamp;\n    }\n    let x, y;\n    [x, y] = this.getCoordToDraw();\n    this.drawOnCanvas(x, y, timestamp);\n  }\n\n  resetAnimation(timestamp) {\n    this.stepAnimation = 0;\n    this.stepAnimationTimeStamp = timestamp;\n  }\n\n  characterIsOutOfScreen() {\n    if (this.pacman.movingCoord[0] === 27 && this.pacman.currentCoord[0] === 0) {\n      return true;\n    }\n    if (this.pacman.movingCoord[0] === 0 && this.pacman.currentCoord[0] === 27) {\n      return true;\n    }\n    return false;\n  }\n\n  getCoordToDraw(){\n    let x,y;\n    if (this.pacman.state === \"MOVING\") {\n      // Get the percentage of progress of the anim\n      let animationProgress = this.getProgressOfAnimation();\n      //Delta of the current tile and target tiles\n      let deltaX = this.pacman.movingCoord[0] - this.pacman.currentCoord[0];\n      let deltaY = this.pacman.movingCoord[1] - this.pacman.currentCoord[1];\n\n      // Position based on the progress of the animation\n      x = this.pacman.currentCoord[0] + deltaX * animationProgress;\n      y = this.pacman.currentCoord[1] + deltaY * animationProgress;\n\n      // Setting the position of the pacman\n    }\n    if (this.pacman.state === \"IDLE\" || this.pacman.state === \"DEAD\") {\n      // If idle, set the pacman at the position of the tile\n      x = this.pacman.currentCoord[0];\n      y = this.pacman.currentCoord[1];\n    }\n    return[x,y];\n  }\n\n  incrementStepAnimation(timestamp){\n    if (this.pacman.state === \"DEAD\" && this.stepAnimation > 2) {\n      this.stepAnimation = 3;\n      this.stepAnimationTimeStamp = timestamp;\n    }\n    else {\n      this.stepAnimation++;\n\n      this.stepAnimation = this.stepAnimation % FRAMES_STEP;\n      this.stepAnimationTimeStamp = timestamp;\n    }\n  }\n\n  getProgressOfAnimation() {\n    let currentTimeStamp = new Date().getTime();\n    return (currentTimeStamp - this.pacman.animTimestamp) / ANIMATION_DURATION;\n  }\n\n\n  drawOnCanvas(x, y, timestamp) {\n    let currentStepDuration = timestamp - this.stepAnimationTimeStamp;\n    if(currentStepDuration > STEP_DURATION){\n      this.incrementStepAnimation(timestamp);\n    }\n    if (this.pacman.state === \"DEAD\") {\n      this.drawDeath(x, y);\n    }\n    else {\n      this.drawBody(x, y);\n      this.drawHead(x, y);\n    }\n  }\n\n  drawDeath(x, y) {\n    const decalageSource = 6\n    const decalageDestination = 32;\n    const frameCoord = [\n      { x: 0, y: 3 },\n      { x: 0, y: 4 },\n      { x: 2, y: 3 },\n      { x: 3, y: 2 }]\n\n    CTX.save();\n\n    const coordX = x * TILE_SIZE - decalageDestination / 2;\n    const coordY = (y - .5)  * TILE_SIZE - decalageDestination / 2;\n    \n    CTX.drawImage(\n      ISAAC_SPRITE,\n      frameCoord[this.stepAnimation].x * SPRITE_SIZE * 2 + decalageSource,\n    frameCoord[this.stepAnimation].y * SPRITE_SIZE * 2 + decalageSource * 1.5,\n      TILE_SIZE * 2 - decalageSource * 2,\n      TILE_SIZE * 2 -decalageSource * 2,\n      coordX,\n      coordY,\n      TILE_SIZE * 2,\n      TILE_SIZE * 2,\n    );\n\n    CTX.restore();\n    \n  }\n\n\n  drawBody(x, y){\n    const incrementConst = 6;\n\n    CTX.save();\n\n    x = x * TILE_SIZE - incrementConst / 2;\n    y = (y - 0.1) * TILE_SIZE - incrementConst / 2;\n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation;\n    let stepAnimationShift = 7;\n    let stepAnimationModulo = 8;\n    let isReversed = false;\n\n    if(this.pacman.direction === 'LEFT' || this.pacman.direction === 'RIGHT'){\n      spriteIndex = 2;\n      stepAnimationShift = 0;\n\n    }\n\n    if (this.pacman.direction === 'LEFT') {\n      isReversed = true;\n    }\n\n    stepAnimation += stepAnimationShift;\n\n    if(stepAnimation >= stepAnimationModulo){\n      spriteIndex++;\n      stepAnimation = stepAnimation % stepAnimationModulo;\n    }\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      ISAAC_SPRITE,\n      stepAnimation * SPRITE_SIZE,\n      spriteIndex * SPRITE_SIZE,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE + incrementConst,\n      TILE_SIZE + incrementConst,\n    );\n\n    CTX.restore();\n\n  }\n\n  drawHead(x, y) {\n    const incrementConst = 6;\n\n    CTX.save();\n\n    x = x * TILE_SIZE - incrementConst / 2;\n    y = (y - 0.50) * TILE_SIZE - incrementConst / 2;\n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation >= 8 ? 1 : 0;\n    let isReversed = false;\n    let stepAnimationShift = 0;\n\n    if (this.pacman.direction === 'UP') {\n      stepAnimationShift = 4;\n    }\n    if (this.pacman.direction === 'RIGHT') {\n      stepAnimationShift = 2;\n    }\n    if (this.pacman.direction === 'LEFT') {\n      stepAnimationShift = 2;\n      isReversed = true;\n    }\n\n\n\n    stepAnimation += stepAnimationShift;\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      ISAAC_SPRITE,\n      stepAnimation * SPRITE_SIZE,\n      0,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE + incrementConst,\n      TILE_SIZE + incrementConst,\n    );\n\n    CTX.restore();\n  }\n}\n","import { SCORE_ELEMENT } from \"./canvas\";\n\nimport PacmanBehaviour from \"./pacmanBehaviour\";\nimport PacmanAnimation from \"./pacmanAnimation\";\n\nimport STATE from \"./state\";\n\nconst gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nconst SPRITE_SIZE = gameData.spriteSize;\nconst ANIMATION_DURATION = gameData.animationDuration;\nconst STEP_DURATION = gameData.stepAnimationDuration;\nconst FRAMES_STEP = gameData.framesStep;\nexport default class Pacman {\n  constructor(coord) {\n    this.init(coord);\n    this.pacmanBehaviour = new PacmanBehaviour(this);\n    this.pacmanAnimation = new PacmanAnimation(this);\n  }\n\n  init(coord = [1, 14]) {\n    // Actual coord of the pacman\n  this.currentCoord = coord;\n\n    // Coord where the pacman is moving to\n  this.movingCoord = coord;\n\n    // Possible state : IDLE, MOVING, DEAD\n    this.state = \"IDLE\";\n\n    // Timestamp fo the start of the animation\n\n    this.direction = \"\";\n\n    this.userInputDirection = \"\";\n    this.inputTimestamp = null;\n  }\n\n\n  update() {\n    if (!this.isAnimationFinished()) {\n      return;\n    }\n\n        // ADD SCORE\n    this.addPoint();\n    \n    this.pacmanBehaviour.update();\n  }\n\n  addPoint() {\n    let currentTile = STATE.board.getTile(STATE.pacman.currentCoord);\n\n    if (currentTile.hasPoint || currentTile.hasSuperPoint) {\n      this.addScore(10);\n      currentTile.removePoint();\n    }\n  }    \n\n  addScore(value) {\n    this.setScore(STATE.score + value);\n  }\n\n  setScore(score) {\n    STATE.score = score;\n    SCORE_ELEMENT.textContent = STATE.score;\n  }\n\n  setUserInputDirection(direction) {\n    this.userInputDirection = direction;\n    this.inputTimestamp = new Date().getTime();\n  }\n\n  isAnimationFinished() {\n    return this.currentCoord === this.movingCoord;\n  }\n\n  setDead() {\n    this.state = \"DEAD\";\n  }\n\n  draw(timestamp) {\n    this.pacmanAnimation.draw(timestamp);\n  }\n\n}\n","import Board from \"./board\";\nimport {\n  CANVAS_ELEMENT,\n  CTX\n} from \"./canvas\";\nimport Ennemy from \"./ennemy\";\nimport Pacman from \"./pacman\";\nimport Tile from \"./tile\";\nimport STATE from \"./state\";\n\nconst gameData = require(\"./data.json\");\nconst ENNEMIES_DATA = gameData.ennemiesData;\nconst DIRECTIONS = ['DOWN', 'UP', 'RIGHT', 'LEFT'];\n\nimport {\n  modulo,\n  DIRECTION_MATRICES,\n  addCoord,\n  distanceBetweenCoords\n} from \"./utils\";\n\nexport default class Game {\n  constructor() {\n\n    STATE.score = 0;\n    // Possible state : STOPPED, START, GAME, CHASE\n    STATE.gameState = \"START\";\n\n    this.initGame();\n  }\n\n  initGame() {\n    STATE.board = new Board();\n    STATE.pacman = new Pacman();\n    STATE.ennemies = this.initEnnemies();\n\n    // START, END\n    STATE.gameState = 'START';\n\n    this.draw();\n  }\n\n  startGameLoop() {\n    this.bindEventHandler();\n    window.requestAnimationFrame(this.loop.bind(this));\n  }\n\n  loop(timestamp) {\n    let progress = timestamp - this.lastRender;\n    this.lastRender = timestamp;\n\n    this.draw(progress, timestamp);\n    this.update(progress, timestamp);\n\n    window.requestAnimationFrame(this.loop.bind(this));\n  }\n\n  update(progress, timestamp) {\n    // Update the state of the world for the elapsed time since last render\n    this.updateGameState();\n    if (STATE.gameState !== 'END') {\n      STATE.pacman.update();\n      this.updateEnnemies(timestamp);\n    }\n  }\n  \n  updateGameState() {\n    if (this.isPacmanDead()) {\n      STATE.pacman.setDead();\n      STATE.gameState = 'END';\n    }\n  }\n\n\n  isPacmanDead() {\n    let pacmanIsDead = false;\n    ennemyLoop : for (let i = 0; i < STATE.ennemies.length; i++){\n      let ennemy = STATE.ennemies[i];\n      if (ennemy.isPacmanKilled(STATE.pacman.currentCoord)) {\n        pacmanIsDead = true;\n        break ennemyLoop;\n      }\n    }\n    return pacmanIsDead;    \n  }\n\n  draw(progress, timestamp) {\n    // Reinit the canvas\n    CTX.fillStyle = \"#2c2a2a\";\n    CTX.fillRect(0, 0, CANVAS_ELEMENT.width, CANVAS_ELEMENT.height);\n    // Update the state of the world for the elapsed time since last render\n    STATE.board.drawBoard();\n    this.drawEnnemies(timestamp);\n    STATE.pacman.draw(timestamp);\n  }\n\n\n  ////////////////////////////////////\n  // GHOSTS\n  ////////////////////////////////////\n  initEnnemies() {\n    const ennemies = [];\n    ENNEMIES_DATA.forEach((ennemyData) => {\n      ennemies.push(new Ennemy(ennemyData));\n    });\n    return ennemies;\n  }\n\n  updateEnnemies(timestamp) {\n    STATE.ennemies.forEach((ennemy) => {\n      ennemy.update(timestamp);\n    });\n  }\n\n  drawEnnemies(timestamp) {\n    STATE.ennemies.forEach((ennemy) => {\n      ennemy.draw(timestamp);\n    });\n  }\n\n\n  bindEventHandler() {\n    document.addEventListener(\"keydown\", this.keydownEventHandler.bind(this));\n  }\n\n  unbindEventHandler() {\n    document.removeEventListener(\"keydown\", this.keydownEventHandler);\n  }\n\n  keydownEventHandler(event) {\n    let keycode = event.which;\n\n    // LEFT : ARROW_LEFT or Q\n    if (keycode === 37 || keycode === 81) {\n      STATE.pacman.setUserInputDirection(\"LEFT\");\n      event.preventDefault();\n    }\n    // RIGHT : ARROW_RIGHT or D\n    if (keycode === 39 || keycode === 68) {\n      STATE.pacman.setUserInputDirection(\"RIGHT\");\n    event.preventDefault();\n    }\n    // UP : ARROW_UP or Z\n    if (keycode === 38 || keycode === 90) {\n      STATE.pacman.setUserInputDirection(\"UP\");\n    event.preventDefault();\n    }\n    // DOWN : ARROW_DOWN or S\n    if (keycode === 40 || keycode === 83) {\n      STATE.pacman.setUserInputDirection(\"DOWN\");\n    event.preventDefault();\n    }\n  }\n}","import Game from \"./game\";\n\nfunction docReady(fn) {\n    // see if DOM is already available\n    if (document.readyState === \"complete\" || document.readyState === \"interactive\") {\n        // call on next available tick\n        setTimeout(fn, 1);\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", fn);\n    }\n}    \n\n\ndocReady(()=>{\n    const game = new Game();\n    game.initGame();\n    game.startGameLoop();\n})\n\n"]}