{"version":3,"sources":["script/canvas.js","script/data.json","script/utils.js","script/tile.js","script/state.js","script/board.js","script/ghost.js","script/pacmanBehaviour.js","script/pacmanAnimation.js","script/pacman.js","script/game.js","script/index.js"],"names":["CANVAS_ELEMENT","document","getElementById","SCORE_ELEMENT","CTX","canvas","getContext","imageSmoothingEnabled","BG_IMAGE","COIN_IMAGE","PILL_IMAGE","ISAAC_SPRITE","BONEY_HEAD","BONEY_BODY","module","exports","animationDuration","stepAnimationDuration","framesStep","spriteSize","tileSize","boardWidth","boardHeight","canvasWidth","canvasHeight","ennemiesData","initialCoord","initialTarget","scatterTarget","spawnTimeout","boardArray","gameData","require","CANVAS_WIDTH","CANVAS_HEIGHT","DIRECTION_MATRICES","modulo","n","m","mod","Math","abs","moduloCoord","coord","getDirectionFromCoord","directionObject","Object","entries","find","directionCoord","compareArrays","addCoord","coord1","coord2","map","value","index","substractCoord","distanceBetweenCoords","part1","pow","part2","sqrt","a","b","length","i","TILE_SIZE","Tile","initialData","tileType","hasPoint","hasSuperPoint","drawImage","incrementConst","State","initState","score","gameState","board","pacman","boneys","STATE","BOARD_ARRAY","BOARD_WIDTH","BOARD_HEIGHT","Board","boardTiles","initBoard","y","line","x","tile","push","coordX","coordY","width","height","drawTiles","forEach","row","drawTile","currentCoord","direction","directionMatrice","coordToMove","getTile","SPRITE_SIZE","ANIMATION_DURATION","STEP_DURATION","FRAMES_STEP","DIRECTIONS","Boney","init","ennemyData","movingCoord","targetCoord","scatterCoord","justSpawned","userInputDirection","beginningGameTimestamp","animTimestamp","stepAnimationTimeStamp","stepAnimation","state","timestamp","Date","getTime","computeDirection","window","setTimeout","includes","characterIsOutOfScreen","getCoordToDraw","drawOnCanvas","isAnimationFinished","animationProgress","getProgressOfAnimation","deltaX","deltaY","incrementStepAnimation","drawBody","drawHead","save","spriteIndex","isReversed","translate","scale","restore","findIndex","PacmanBehaviour","nextTile","computePathPacman","setMovingCoord","isUserInputValid","nextTileUserDirection","getNextTileInDirection","confirmUserDirection","nextTileCurrentDirection","timeSinceLastInput","inputTimestamp","PacmanAnimation","stepAnimationShift","Pacman","pacmanBehaviour","pacmanAnimation","addPoint","update","currentTile","addScore","removePoint","setScore","textContent","draw","ENNEMIES_DATA","Game","initGame","initEnnemies","bindEventHandler","requestAnimationFrame","loop","bind","progress","lastRender","updateGameState","updateEnnemies","isPacmanDead","pacmanIsDead","ennemyLoop","boney","isEnnemyKilled","fillStyle","fillRect","drawBoard","drawEnnemies","updateEnnemy","ennemy","canMove","updateState","possibleTiles","getEnnemyPossibleTiles","getTarget","tileToMove","computeNearestTileToTarget","adjacentTiles","filter","dir","getOppositeDirection","isTilePossible","closestDistance","closestTile","distance","addEventListener","keydownEventHandler","removeEventListener","event","keycode","which","setUserInputDirection","preventDefault","docReady","fn","readyState","game","startGameLoop"],"mappings":"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","file":"script.6ff4f46f.js","sourceRoot":"..","sourcesContent":["export const CANVAS_ELEMENT = document.getElementById(\"canvas\");\nexport const SCORE_ELEMENT = document.getElementById(\"score\");\nexport const CTX = canvas.getContext(\"2d\");\nCTX.imageSmoothingEnabled = false;\n\nexport const BG_IMAGE = document.getElementById(\"bgBoard\");\nexport const COIN_IMAGE = document.getElementById(\"coin\");\nexport const PILL_IMAGE = document.getElementById(\"pill\");\nexport const ISAAC_SPRITE = document.getElementById(\"isaacSprite\");\nexport const BONEY_HEAD = document.getElementById(\"boneyHead\");\nexport const BONEY_BODY = document.getElementById(\"boneyBody\");\n","module.exports={animationDuration:200,stepAnimationDuration:50,framesStep:10,spriteSize:32,tileSize:32,boardWidth:28,boardHeight:31,canvasWidth:840,canvasHeight:930,ennemiesData:[{initialCoord:[12,13],initialTarget:[13,11],scatterTarget:[1,26],spawnTimeout:2e3},{initialCoord:[13,13],initialTarget:[13,11],scatterTarget:[1,1],spawnTimeout:4e3},{initialCoord:[14,13],initialTarget:[13,11],scatterTarget:[26,1],spawnTimeout:6e3},{initialCoord:[15,13],initialTarget:[14,11],scatterTarget:[26,29],spawnTimeout:8e3}],boardArrayh\",\"h\",\"h\",\"h\",\"h\",\"h\",\"X\",\".\",\"X\",\"X\",\".\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"X\",\"h\",\"h\",\"h\",\"h\",\"h\",\"h\",\"X\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\".\",\"X\",\"X\",\".\",\"X\",\"h\",\"h\",\"h\",\"h\",\"h\",\"h};","let gameData = require(\"./data.json\");\nconst CANVAS_WIDTH = gameData.canvasWidth;\nconst CANVAS_HEIGHT = gameData.canvasHeight;\n\n\nexport const DIRECTION_MATRICES = {\n    'LEFT' : [-1, 0],\n    'RIGHT' : [1, 0],\n    'UP' : [0, -1],\n    'DOWN' : [0, 1]\n\n}\n\nexport function modulo(n, m) {\n    var mod = ((n % m) + m) % m;\n    return mod < 0 ? mod + Math.abs(m) : mod;\n};\n\nexport function moduloCoord(coord) {\n    return [modulo(coord[0], CANVAS_WIDTH), modulo(coord[1], CANVAS_HEIGHT)]\n};\n\nexport function getDirectionFromCoord(coord){\n    const directionObject = Object.entries(DIRECTION_MATRICES).find(([direction, directionCoord])=>{\n        return compareArrays(coord, directionCoord);\n    });\n    if (directionObject) {\n    return directionObject[0];\n    }    \n}\n    \n\nexport function addCoord(coord1, coord2) {\n    return coord1.map((value, index) => value += coord2[index]);\n};\n\nexport function substractCoord(coord1, coord2) {\n    return coord1.map((value, index) => value -= coord2[index]);\n};\n\nexport function distanceBetweenCoords(coord1, coord2) {\n    let part1 = Math.pow(coord1[0] - coord2[0], 2);\n    let part2 = Math.pow(coord1[1] - coord2[1], 2);\n    return Math.sqrt(part1 + part2);\n};\n\nexport function compareArrays(a, b){\n  // if length is not equal\n  if(a?.length != b?.length)   return false;\n\n  // comapring each element of array\n   for(var i=0;i<a.length;i++){\n   if(a[i]!=b[i]) return false;\n   }\n    return true;\n  }","import { CTX, COIN_IMAGE, PILL_IMAGE } from \"./canvas\";\nimport {compareArrays} from \"./utils\";\n\nlet gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nexport default class Tile {\n  constructor(initialData, coord) {\n    //possible tileType : 'PATH', 'WALL', 'GATE', 'HOME'\n    this.tileType = \"\";\n    this.coord = coord;\n    this.hasPoint = false;\n    this.hasSuperPoint = false;\n\n    switch (initialData) {\n      case \"X\":\n        this.tileType = \"WALL\";\n        break;\n      case \".\":\n        this.tileType = \"PATH\";\n        this.hasPoint = true;\n        break;\n      case \"O\":\n        this.tileType = \"PATH\";\n        this.hasSuperPoint = true;\n        break;\n      case \"-\":\n        this.tileType = \"GATE\";\n        break;\n      case \"h\":\n        this.tileType = \"HOME\";\n        break;\n      default:\n        break;\n    }\n  }\n\n  removePoint() {\n    this.hasPoint = false;\n    this.hasSuperPoint = false;\n  }\n\n  drawTile() {\n    if (this.hasPoint) {\n    CTX.drawImage(\n      COIN_IMAGE,\n      this.coord[0] * TILE_SIZE,\n      this.coord[1] * TILE_SIZE,\n      TILE_SIZE,\n      TILE_SIZE\n    );\n    }\n\n    if (this.hasSuperPoint) {\n      const incrementConst = 16;\n\n      CTX.drawImage(\n        PILL_IMAGE,\n        this.coord[0] * TILE_SIZE - incrementConst/2,\n        this.coord[1] * TILE_SIZE - incrementConst/2,\n        TILE_SIZE + incrementConst,\n        TILE_SIZE + incrementConst\n      );\n      }\n    }\n  }\n\n","class State {\n  constructor() {\n    this.initState();\n  }\n\n  initState() {\n    this.score = 0;\n    this.gameState = 'START';\n    this.board;\n    this.pacman;\n    this.boneys;\n  }\n}\n\nconst STATE = new State();\nexport default {STATE};\n","import Tile from \"./tile\";\nimport { CANVAS_ELEMENT, CTX, BG_IMAGE } from \"./canvas\";\nimport { modulo, addCoord,  DIRECTION_MATRICES } from \"./utils\";\n\nimport STATE from \"./state\";\n\nlet gameData = require(\"./data.json\");\nconst BOARD_ARRAY = gameData.boardArray;\nconst BOARD_WIDTH = gameData.boardArray[0].length;\nconst BOARD_HEIGHT = gameData.boardArray.length;\nconst CANVAS_WIDTH = gameData.canvasWidth;\nconst CANVAS_HEIGHT = gameData.canvasHeight;\n\nexport default class Board {\n  constructor() {\n    this.boardTiles = [];\n    this.initBoard();\n  }\n\n  initBoard() {\n    this.boardTiles = [];\n    for (let y = 0; y < BOARD_HEIGHT; y++) {\n      let line = [];\n      for (let x = 0; x < BOARD_WIDTH; x++) {\n        let tile = new Tile(BOARD_ARRAY[y][x], [x, y]);\n        line.push(tile);\n      }\n      this.boardTiles.push(line);\n    }\n  }\n\n  getTile(coord) {\n    if (coord) {\n      let coordX = modulo(coord[0], BOARD_WIDTH);\n      let coordY = modulo(coord[1], BOARD_HEIGHT);\n      return this.boardTiles[coordY][coordX];\n    }\n  }\n\n  drawBoard() {\n    CTX.drawImage(BG_IMAGE, 0, 0, CANVAS_ELEMENT.width, CANVAS_ELEMENT.height);\n    this.drawTiles();\n  }\n\n  drawTiles() {\n    this.boardTiles.forEach((row) => {\n      row.forEach((tile) => {\n        tile.drawTile();\n      });\n    });\n  }\n\n  getNextTileInDirection(currentCoord, direction) {\n    if (!direction || !currentCoord) {\n      return false;\n    }\n\n    let directionMatrice = DIRECTION_MATRICES[direction];\n    let coordToMove = addCoord(directionMatrice, currentCoord);\n    return STATE.board.getTile(coordToMove);\n  }\n}\n","import {\n  CTX,\n  BONEY_HEAD,\n  BONEY_BODY\n} from \"./canvas\";\n\nimport {\n  getDirectionFromCoord,\n  compareArrays,\n  substractCoord\n} from \"./utils\";\n\nconst gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nconst SPRITE_SIZE = gameData.spriteSize;\nconst ANIMATION_DURATION = gameData.animationDuration;\nconst STEP_DURATION = gameData.stepAnimationDuration;\nconst FRAMES_STEP = gameData.framesStep;\nconst DIRECTIONS = ['DOWN', 'RIGHT', 'UP', 'LEFT'];\n\n//STATE : SPAWN, SCATTER, CHASE\nexport default class Boney {\n  constructor(coord) {\n    this.init(coord);\n  }\n\n  init(ennemyData) {\n    this.ennemyData = ennemyData;\n    // Actual coord\n    this.currentCoord = ennemyData.initialCoord;\n\n    // Coord where the pacman is moving to\n    this.movingCoord = this.currentCoord;\n\n    // Position of the gate to move to\n    this.targetCoord = ennemyData.initialTarget;\n    this.scatterCoord = ennemyData.scatterTarget;\n    this.spawnTimeout = ennemyData.spawnTimeout;\n    this.justSpawned = true;\n\n    // Timestamp fo the start of the animation\n    this.direction = \"\";\n    this.userInputDirection = \"\";\n\n\n    this.beginningGameTimestamp = null;\n    this.animTimestamp = null;\n    this.stepAnimationTimeStamp = null;\n    this.stepAnimation = 0;\n\n    this.state = 'SPAWN';\n  }\n\n  canMove(timestamp) {\n    if (!this.beginningGameTimestamp) {\n      this.beginningGameTimestamp = timestamp;\n      return false;\n    }\n\n    return (timestamp - this.beginningGameTimestamp) > this.spawnTimeout;\n  }\n\n  setDirection(direction) {\n    this.direction = direction;\n  }\n\n  getOppositeDirection(){\n    switch (this.direction){\n      case 'UP':\n        return 'DOWN';\n        break;\n      case 'DOWN':\n        return 'UP';\n        break;\n      case 'LEFT':\n        return 'RIGHT';\n        break;\n      case 'RIGHT':\n        return 'LEFT';\n        break;\n      default:\n        return null;\n    }\n\n  }\n\n  setMovingCoord(coord) {\n    this.movingCoord = coord;\n    this.animTimestamp = new Date().getTime();\n    this.direction = this.computeDirection();\n    window.setTimeout(() => {\n      this.currentCoord = coord;\n    }, ANIMATION_DURATION);\n  }\n\n  updateState() {\n    switch (this.state) {\n      case 'SPAWN':\n        if (compareArrays(this.currentCoord, this.targetCoord)) {\n          this.targetCoord = this.scatterCoord;\n          this.state = 'SCATTER'\n        };\n        break;\n      case 'SCATTER':\n        if (compareArrays(this.currentCoord, this.scatterCoord)) {\n          this.state = 'CHASE'\n        };\n        break;\n      case 'CHASE':\n        break;\n    }\n  }\n\n  computeDirection() {\n    const directionCoord = substractCoord(this.movingCoord, this.currentCoord);\n    return getDirectionFromCoord(directionCoord);\n  }\n\n  isAnimationFinished() {\n    return this.currentCoord === this.movingCoord;\n  }\n\n  isEnnemyKilled(targetCoord) {\n    return compareArrays(targetCoord, this.currentCoord);\n  }\n\n  isTilePossible(tile) {\n    if (this.justSpawned) {\n      return ['PATH', 'GATE', 'HOME'].includes(tile.tileType);\n    }\n    return tile ?.tileType === \"PATH\";\n  }\n\n  updateAnimation() {\n    return null;\n  }\n\n  draw(timestamp) {\n    if (this.characterIsOutOfScreen()) {\n      return;\n    }\n    if(!this.stepAnimationTimeStamp){\n      this.stepAnimationTimeStamp = timestamp;\n    }\n    let x, y;\n    [x, y] = this.getCoordToDraw();\n    this.drawOnCanvas(x, y, timestamp);\n  }\n\n\n  characterIsOutOfScreen() {\n    if (this.movingCoord[0] === 27 && this.currentCoord[0] === 0) {\n      return true;\n    }\n    if (this.movingCoord[0] === 0 && this.currentCoord[0] === 27) {\n      return true;\n    }\n    return false;\n  }\n\n  getCoordToDraw() {\n    let x, y;\n    if (this.isAnimationFinished()) {\n      return this.currentCoord;\n    }\n    // Get the percentage of progress of the anim\n    let animationProgress = this.getProgressOfAnimation();\n\n    //Delta of the current tile and target tiles\n    let deltaX = this.movingCoord[0] - this.currentCoord[0];\n    let deltaY = this.movingCoord[1] - this.currentCoord[1];\n\n    // Position based on the progress of the animation\n    x = this.currentCoord[0] + deltaX * animationProgress;\n    y = this.currentCoord[1] + deltaY * animationProgress;\n\n    // Setting the position of the pacman\n    return [x, y];\n  }\n\n  drawOnCanvas(x, y, timestamp) {\n    let currentStepDuration = timestamp - this.stepAnimationTimeStamp;\n    if(currentStepDuration > STEP_DURATION){\n      this.incrementStepAnimation(timestamp);\n    }\n    this.drawBody(x, y);\n    this.drawHead(x, y);\n  }\n\n  drawBody(x, y){\n    const incrementConst = 6;\n\n    CTX.save();\n\n    x = x * TILE_SIZE - incrementConst / 2;\n    y = (y - 0.2) * TILE_SIZE - incrementConst / 2;\n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation;\n    let isReversed = false;\n\n    if(this.direction === 'LEFT' || this.direction === 'RIGHT'){\n      spriteIndex = 2;\n    }\n\n    if (this.direction === 'LEFT') {\n      isReversed = true;\n    }\n\n    if(stepAnimation > 7){\n      spriteIndex++;\n      stepAnimation = stepAnimation % 8;\n    }\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      BONEY_BODY,\n      stepAnimation * SPRITE_SIZE,\n      spriteIndex * SPRITE_SIZE,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE + incrementConst,\n      TILE_SIZE + incrementConst,\n    );\n\n    CTX.restore();\n\n  }\n\n  drawHead(x, y) {\n    const incrementConst = 6;\n\n    CTX.save();\n\n    x = x * TILE_SIZE - incrementConst / 2;\n    y = (y - 0.6) * TILE_SIZE - incrementConst / 2;\n\n      let spriteIndex = DIRECTIONS.findIndex((direction) => direction === this.direction);\n    if (spriteIndex === -1) spriteIndex = 0;\n    let isReversed = false;\n    if (this.direction === 'LEFT') {\n      isReversed = true;\n      spriteIndex = 1;\n    }\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      BONEY_HEAD,\n      spriteIndex * SPRITE_SIZE,\n      0,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE + incrementConst,\n      TILE_SIZE + incrementConst,\n    );\n\n    CTX.restore();\n  }\n\n  incrementStepAnimation(timestamp){\n    this.stepAnimation++;\n    this.stepAnimation = this.stepAnimation % FRAMES_STEP;\n    this.stepAnimationTimeStamp = timestamp;\n  }\n\n  getProgressOfAnimation() {\n    let currentTimeStamp = new Date().getTime();\n    return (currentTimeStamp - this.animTimestamp) / ANIMATION_DURATION;\n  }\n}","const gameData = require(\"./data.json\");\nconst ANIMATION_DURATION = gameData.animationDuration;\n\n\nimport STATE from \"./state\";\n\nexport default class PacmanBehaviour {\n  constructor(pacman) {\n    this.init(pacman);\n  }\n\n  init(pacman) {\n    this.pacman = pacman;\n  }\n\n\n  update() {\n    // If animation still happening, leave\n    let nextTile = this.computePathPacman();\n    if (nextTile) {\n      this.setMovingCoord(nextTile.coord);\n    } else {\n      // If no valid target tile, stop pacman\n      this.pacman.direction = \"\";\n      this.pacman.state = \"IDLE\";\n    }\n  }\n\n  computePathPacman() {\n    // If no direction given, leave\n    if (!this.pacman.direction && !this.isUserInputValid()) {\n      return;\n    }\n\n    // Get the next tile in the user given direction\n    let nextTileUserDirection = STATE.board.getNextTileInDirection(\n      this.pacman.currentCoord,\n      this.pacman.userInputDirection\n    );\n\n    // If the user direction is valid\n    if (nextTileUserDirection?.tileType === \"PATH\") {\n      this.confirmUserDirection();\n      return nextTileUserDirection;\n    }\n\n    // Get the next tile in the initial direction\n    let nextTileCurrentDirection = STATE.board.getNextTileInDirection(\n      this.pacman.currentCoord,\n      this.pacman.direction\n    );\n\n    // If the initial direction is valid\n    if (nextTileCurrentDirection?.tileType === \"PATH\") {\n      this.setMovingCoord(nextTileCurrentDirection.coord);\n      return nextTileCurrentDirection;\n    }\n  }\n\n\n  setMovingCoord(coord) {\n    this.pacman.state = \"MOVING\";\n    this.pacman.movingCoord = coord;\n    this.pacman.animTimestamp = new Date().getTime();\n    window.setTimeout(() => {\n      this.pacman.currentCoord = coord;\n    }, ANIMATION_DURATION);\n  }\n\n\n\n  isUserInputValid(){\n    let timeSinceLastInput = new Date().getTime() - this.pacman.inputTimestamp;\n    if(timeSinceLastInput > 2000) return null;\n    return this.pacman.userInputDirection;\n  }\n\n  confirmUserDirection() {\n    this.pacman.direction = this.pacman.userInputDirection;\n  }\n\n}\n","const gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nconst SPRITE_SIZE = gameData.spriteSize;\nconst ANIMATION_DURATION = gameData.animationDuration;\nconst STEP_DURATION = gameData.stepAnimationDuration;\nconst FRAMES_STEP = gameData.framesStep;\n\nimport { CTX, ISAAC_SPRITE } from \"./canvas\";\n\nimport STATE from \"./state\";\n\nexport default class PacmanAnimation {\n  constructor(pacman) {\n    this.init(pacman);\n  }\n\n  init(pacman) {\n    this.pacman = pacman;\n    this.stepAnimationTimeStamp = null;\n    this.stepAnimation = 0;\n  }\n\n\n  draw(timestamp) {\n    if (this.characterIsOutOfScreen()) {\n      return;\n    }\n\n    if(!this.stepAnimationTimeStamp){\n      this.stepAnimationTimeStamp = timestamp;\n    }\n    let x, y;\n    [x, y] = this.getCoordToDraw();\n    this.drawOnCanvas(x, y, timestamp);\n  }\n\n  characterIsOutOfScreen() {\n    if (this.pacman.movingCoord[0] === 27 && this.pacman.currentCoord[0] === 0) {\n      return true;\n    }\n    if (this.pacman.movingCoord[0] === 0 && this.pacman.currentCoord[0] === 27) {\n      return true;\n    }\n    return false;\n  }\n\n  getCoordToDraw(){\n    let x,y;\n    if (this.pacman.state === \"MOVING\") {\n      // Get the percentage of progress of the anim\n      let animationProgress = this.getProgressOfAnimation();\n      //Delta of the current tile and target tiles\n      let deltaX = this.pacman.movingCoord[0] - this.pacman.currentCoord[0];\n      let deltaY = this.pacman.movingCoord[1] - this.pacman.currentCoord[1];\n\n      // Position based on the progress of the animation\n      x = this.pacman.currentCoord[0] + deltaX * animationProgress;\n      y = this.pacman.currentCoord[1] + deltaY * animationProgress;\n\n      // Setting the position of the pacman\n    }\n    if (this.pacman.state === \"IDLE\") {\n      // If idle, set the pacman at the position of the tile\n      x = this.pacman.currentCoord[0];\n      y = this.pacman.currentCoord[1];\n    }\n    return[x,y];\n  }\n\n  incrementStepAnimation(timestamp){\n    this.stepAnimation++;\n    this.stepAnimation = this.stepAnimation % FRAMES_STEP;\n    this.stepAnimationTimeStamp = timestamp;\n  }\n\n  getProgressOfAnimation() {\n    let currentTimeStamp = new Date().getTime();\n    return (currentTimeStamp - this.pacman.animTimestamp) / ANIMATION_DURATION;\n  }\n\n\n  drawOnCanvas(x, y, timestamp) {\n    let currentStepDuration = timestamp - this.stepAnimationTimeStamp;\n    if(currentStepDuration > STEP_DURATION){\n      this.incrementStepAnimation(timestamp);\n    }\n\n    this.drawBody(x, y);\n    this.drawHead(x, y);\n  }\n\n\n  drawBody(x, y){\n    const incrementConst = 6;\n\n    CTX.save();\n\n    x = x * TILE_SIZE - incrementConst / 2;\n    y = (y - 0.1) * TILE_SIZE - incrementConst / 2;\n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation;\n    let stepAnimationShift = 7;\n    let stepAnimationModulo = 8;\n    let isReversed = false;\n\n    if(this.pacman.direction === 'LEFT' || this.pacman.direction === 'RIGHT'){\n      spriteIndex = 2;\n      stepAnimationShift = 0;\n\n    }\n\n    if (this.pacman.direction === 'LEFT') {\n      isReversed = true;\n    }\n\n    stepAnimation += stepAnimationShift;\n\n    if(stepAnimation >= stepAnimationModulo){\n      spriteIndex++;\n      stepAnimation = stepAnimation % stepAnimationModulo;\n    }\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      ISAAC_SPRITE,\n      stepAnimation * SPRITE_SIZE,\n      spriteIndex * SPRITE_SIZE,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE + incrementConst,\n      TILE_SIZE + incrementConst,\n    );\n\n    CTX.restore();\n\n  }\n\n  drawHead(x, y) {\n    const incrementConst = 6;\n\n    CTX.save();\n\n    x = x * TILE_SIZE - incrementConst / 2;\n    y = (y - 0.50) * TILE_SIZE - incrementConst / 2;\n\n    let spriteIndex = 0;\n    let stepAnimation = this.stepAnimation >= 8 ? 1 : 0;\n    let isReversed = false;\n    let stepAnimationShift = 0;\n\n    if (this.pacman.direction === 'UP') {\n      stepAnimationShift = 4;\n    }\n    if (this.pacman.direction === 'RIGHT') {\n      stepAnimationShift = 2;\n    }\n    if (this.pacman.direction === 'LEFT') {\n      stepAnimationShift = 2;\n      isReversed = true;\n    }\n\n\n\n    stepAnimation += stepAnimationShift;\n\n    if (isReversed) {\n      CTX.translate( x + TILE_SIZE, y);\n      CTX.scale(-1, 1);\n      x = 0;\n      y= 0\n    }\n\n    CTX.drawImage(\n      ISAAC_SPRITE,\n      stepAnimation * SPRITE_SIZE,\n      0,\n      TILE_SIZE,\n      TILE_SIZE,\n      x,\n      y,\n      TILE_SIZE + incrementConst,\n      TILE_SIZE + incrementConst,\n    );\n\n    CTX.restore();\n  }\n}\n","import { SCORE_ELEMENT } from \"./canvas\";\n\nimport PacmanBehaviour from \"./pacmanBehaviour\";\nimport PacmanAnimation from \"./pacmanAnimation\";\n\nimport STATE from \"./state\";\n\nconst gameData = require(\"./data.json\");\nconst TILE_SIZE = gameData.tileSize;\nconst SPRITE_SIZE = gameData.spriteSize;\nconst ANIMATION_DURATION = gameData.animationDuration;\nconst STEP_DURATION = gameData.stepAnimationDuration;\nconst FRAMES_STEP = gameData.framesStep;\nexport default class Pacman {\n  constructor(coord) {\n    this.init(coord);\n    this.pacmanBehaviour = new PacmanBehaviour(this);\n    this.pacmanAnimation = new PacmanAnimation(this);\n  }\n\n  init(coord = [1, 14]) {\n    // Actual coord of the pacman\n  this.currentCoord = coord;\n\n    // Coord where the pacman is moving to\n  this.movingCoord = coord;\n\n    // Possible state : IDLE, MOVING, DEAD\n    this.state = \"IDLE\";\n\n    // Timestamp fo the start of the animation\n\n    this.direction = \"\";\n\n    this.userInputDirection = \"\";\n    this.inputTimestamp = null;\n  }\n\n\n  update() {\n    if (!this.isAnimationFinished()) {\n      return;\n    }\n\n        // ADD SCORE\n    this.addPoint();\n    \n    this.pacmanBehaviour.update();\n  }\n\n  addPoint() {\n    let currentTile = STATE.board.getTile(STATE.pacman.currentCoord);\n\n    if (currentTile.hasPoint || currentTile.hasSuperPoint) {\n      this.addScore(10);\n      currentTile.removePoint();\n    }\n  }    \n\n  addScore(value) {\n    this.setScore(STATE.score + value);\n  }\n\n  setScore(score) {\n    STATE.score = score;\n    SCORE_ELEMENT.textContent = STATE.score;\n  }\n\n  setUserInputDirection(direction) {\n    this.userInputDirection = direction;\n    this.inputTimestamp = new Date().getTime();\n  }\n\n  isAnimationFinished() {\n    return this.currentCoord === this.movingCoord;\n  }\n\n  updateAnimation() {\n    return null;\n  }\n\n  draw(timestamp) {\n    this.pacmanAnimation.draw(timestamp);\n  }\n}\n","import Board from \"./board\";\nimport {\n  CANVAS_ELEMENT,\n  CTX\n} from \"./canvas\";\nimport Boney from \"./ghost\";\nimport Pacman from \"./pacman\";\nimport Tile from \"./tile\";\nimport STATE from \"./state\";\n\nconst gameData = require(\"./data.json\");\nconst ENNEMIES_DATA = gameData.ennemiesData;\nconst DIRECTIONS = ['DOWN', 'UP', 'RIGHT', 'LEFT'];\n\nimport {\n  modulo,\n  DIRECTION_MATRICES,\n  addCoord,\n  distanceBetweenCoords\n} from \"./utils\";\n\nexport default class Game {\n  constructor() {\n\n    STATE.score = 0;\n    // Possible state : STOPPED, START, GAME, CHASE\n    STATE.gameState = \"START\";\n\n    this.initGame();\n  }\n\n  initGame() {\n    STATE.board = new Board();\n    STATE.pacman = new Pacman();\n    STATE.boneys = this.initEnnemies();\n\n    // START, END\n    STATE.gameState = 'START';\n\n    this.draw();\n  }\n\n  startGameLoop() {\n    this.bindEventHandler();\n    window.requestAnimationFrame(this.loop.bind(this));\n  }\n\n  loop(timestamp) {\n    let progress = timestamp - this.lastRender;\n    this.lastRender = timestamp;\n\n    this.draw(progress, timestamp);\n    this.update(progress, timestamp);\n\n    window.requestAnimationFrame(this.loop.bind(this));\n  }\n\n  update(progress, timestamp) {\n    // Update the state of the world for the elapsed time since last render\n    this.updateGameState();\n    if (STATE.gameState !== 'END') {\n      STATE.pacman.update();\n      this.updateEnnemies(timestamp);\n    }\n  }\n  \n  updateGameState() {\n    if (this.isPacmanDead()) {\n      STATE.gameState = 'END';\n    }\n  }\n\n\n  isPacmanDead() {\n    let pacmanIsDead = false;\n    ennemyLoop : for (let i = 0; i < STATE.boneys.length; i++){\n      let boney = STATE.boneys[i];\n      if (boney.isEnnemyKilled(STATE.pacman.currentCoord)) {\n        pacmanIsDead = true;\n        break ennemyLoop;\n      }\n    }\n    return pacmanIsDead;    \n  }\n\n  draw(progress, timestamp) {\n    // Reinit the canvas\n    CTX.fillStyle = \"#2c2a2a\";\n    CTX.fillRect(0, 0, CANVAS_ELEMENT.width, CANVAS_ELEMENT.height);\n    // Update the state of the world for the elapsed time since last render\n    STATE.board.drawBoard();\n    STATE.pacman.draw(timestamp);\n    this.drawEnnemies(timestamp);\n  }\n\n\n  ////////////////////////////////////\n  // GHOSTS\n  ////////////////////////////////////\n  initEnnemies() {\n    const boneys = [];\n    ENNEMIES_DATA.forEach((ennemyData) => {\n      boneys.push(new Boney(ennemyData));\n    });\n    return boneys;\n  }\n\n  updateEnnemies(timestamp) {\n    STATE.boneys.forEach((boney) => {\n      this.updateEnnemy(boney, timestamp);\n    });\n  }\n\n  updateEnnemy(ennemy,timestamp) {\n    if (!ennemy.isAnimationFinished()) return;\n    if (!ennemy.canMove(timestamp)) return;\n\n    ennemy.updateState();\n\n    // get all possible tiles for the ennemy\n    const possibleTiles = this.getEnnemyPossibleTiles(ennemy);\n    if (possibleTiles.length > 1 && ennemy.state === 'CHASE') {\n      this.getTarget(ennemy);\n    }\n    // Compute what is the closest possible tile to the target coord\n    const tileToMove = this.computeNearestTileToTarget(ennemy, possibleTiles);\n    if (!tileToMove) return;\n\n    // Set the target coord\n    ennemy.setMovingCoord(tileToMove.coord);\n  }\n\n  getEnnemyPossibleTiles(ennemy) {\n    let currentCoord = ennemy.currentCoord;\n    // Ennemies can't go backwards\n    let possibleDirections = DIRECTIONS.filter((dir) => dir != ennemy.getOppositeDirection());\n    let adjacentTiles = possibleDirections.map((direction) => {\n      return this.getNextTileInDirection(currentCoord, direction);\n    });\n\n    return adjacentTiles.filter((tile) => {\n      return ennemy.isTilePossible(tile);\n    })\n  }\n\n  computeNearestTileToTarget(ennemy, possibleTiles) {\n    let targetCoord = ennemy.targetCoord;\n    let closestDistance = null;\n    let closestTile = null;\n\n    possibleTiles.forEach((tile) => {\n      let distance = distanceBetweenCoords(tile.coord, ennemy.targetCoord);\n      if (closestDistance === null || distance < closestDistance) {\n        closestDistance = distance;\n        closestTile = tile;\n      }\n    });\n    return closestTile;\n  }\n\n  getTarget(ennemy) {\n    if (!ennemy.state === 'CHASE') return;\n    ennemy.justSpawned = false;\n    ennemy.targetCoord = STATE.pacman.movingCoord;\n  }\n\n\n\n  drawEnnemies(timestamp) {\n    STATE.boneys.forEach((boney) => {\n      boney.draw(timestamp);\n    });\n  }\n\n\n  getNextTileInDirection(currentCoord, direction) {\n    if (!direction || !currentCoord) {\n      return false;\n    }\n\n    let directionMatrice = DIRECTION_MATRICES[direction];\n    let coordToMove = addCoord(directionMatrice, currentCoord);\n    return STATE.board.getTile(coordToMove);\n  }\n\n\n\n  bindEventHandler() {\n    document.addEventListener(\"keydown\", this.keydownEventHandler.bind(this));\n  }\n\n  unbindEventHandler() {\n    document.removeEventListener(\"keydown\", this.keydownEventHandler);\n  }\n\n  keydownEventHandler(event) {\n    let keycode = event.which;\n\n    // LEFT : ARROW_LEFT or Q\n    if (keycode === 37 || keycode === 81) {\n      STATE.pacman.setUserInputDirection(\"LEFT\");\n      event.preventDefault();\n    }\n    // RIGHT : ARROW_RIGHT or D\n    if (keycode === 39 || keycode === 68) {\n      STATE.pacman.setUserInputDirection(\"RIGHT\");\n    event.preventDefault();\n    }\n    // UP : ARROW_UP or Z\n    if (keycode === 38 || keycode === 90) {\n      STATE.pacman.setUserInputDirection(\"UP\");\n    event.preventDefault();\n    }\n    // DOWN : ARROW_DOWN or S\n    if (keycode === 40 || keycode === 83) {\n      STATE.pacman.setUserInputDirection(\"DOWN\");\n    event.preventDefault();\n    }\n  }\n}","import Game from \"./game\";\n\nfunction docReady(fn) {\n    // see if DOM is already available\n    if (document.readyState === \"complete\" || document.readyState === \"interactive\") {\n        // call on next available tick\n        setTimeout(fn, 1);\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", fn);\n    }\n}    \n\n\ndocReady(()=>{\n    const game = new Game();\n    game.initGame();\n    game.startGameLoop();\n})\n\n"]}